Grammar

    0 $accept: program $end

    1 program: program stmt
    2        | stmt

    3 stmt: genn_stmt
    4     | func_stmt
    5     | print_stmt
    6     | for_stmt
    7     | if_stmt
    8     | enum_stmt
    9     | while_stmt
   10     | repeat_stmt
   11     | switch_stmt
   12     | COMMENT

   13 stmt_list: stmt
   14          | stmt_list stmt

   15 func_stmt_list: stmt_list RETURN expr ';'
   16               | RETURN expr ';'

   17 break_stmt_list: stmt_list BREAK ';'
   18                | BREAK ';'

   19 genn_stmt: type IDENTIFIER ';'
   20          | type IDENTIFIER EQU func_call ';'
   21          | IDENTIFIER EQU func_call ';'
   22          | CONSTANT type IDENTIFIER EQU rvalue ';'
   23          | IDENTIFIER EQU expr ';'
   24          | type IDENTIFIER EQU expr ';'
   25          | expr ';'

   26 func_stmt: func_proto
   27          | func_define
   28          | func_call

   29 print_stmt: PRINT '(' expr ')' ';'

   30 for_stmt: for_proto
   31         | for_define

   32 if_stmt: if_proto
   33        | if_define

   34 enum_stmt: enum_declare
   35          | enum_define

   36 while_stmt: while_proto
   37           | while_define

   38 repeat_stmt: REPEAT '{' stmt_list '}' UNTIL '(' expr ')' ';'
   39            | REPEAT '{' '}' UNTIL '(' expr ')' ';'

   40 switch_stmt: SWITCH '(' IDENTIFIER ')' '{' case_list case_default '}' ';'
   41            | SWITCH '(' IDENTIFIER ')' '{' case_default '}' ';'

   42 func_proto: type IDENTIFIER '(' parameters ')' ';'
   43           | TYPE_VOID IDENTIFIER '(' parameters ')' ';'

   44 func_define: type IDENTIFIER '(' parameters ')' '{' func_stmt_list '}'
   45            | TYPE_VOID IDENTIFIER '(' parameters ')' '{' stmt_list '}'

   46 func_call: IDENTIFIER '(' expr_list ')'

   47 for_proto: FOR '(' IDENTIFIER EQU expr ';' expr ';' expr ')' ';'
   48          | FOR '(' expr ';' expr ';' expr ')' ';'

   49 for_define: FOR '(' IDENTIFIER EQU expr ';' expr ';' expr ')' '{' stmt_list '}'
   50           | FOR '(' IDENTIFIER EQU expr ';' expr ';' expr ')' '{' break_stmt_list '}'
   51           | FOR '(' expr ';' expr ';' expr ')' '{' stmt_list '}'
   52           | FOR '(' expr ';' expr ';' expr ')' '{' break_stmt_list '}'

   53 if_proto: IF '(' expr ')' ';'

   54 if_define: IF '(' expr ')' '{' stmt_list '}'
   55          | IF '(' expr ')' '{' stmt_list '}' ELSE '{' stmt_list '}'
   56          | IF '(' expr ')' '{' stmt_list '}' ELSE '{' '}'
   57          | IF '(' expr ')' '{' stmt_list '}' ELSE ';'
   58          | IF '(' expr ')' '{' '}'
   59          | IF '(' expr ')' '{' '}' ELSE '{' stmt_list '}'
   60          | IF '(' expr ')' '{' '}' ELSE '{' '}'
   61          | IF '(' expr ')' '{' '}' ELSE ';'

   62 enum_declare: ENUM IDENTIFIER '{' enum_list '}' ';'

   63 enum_define: ENUM IDENTIFIER IDENTIFIER EQU IDENTIFIER ';'

   64 while_proto: WHILE '(' expr ')' ';'

   65 while_define: WHILE '(' expr ')' '{' stmt_list '}'
   66             | WHILE '(' expr ')' '{' break_stmt_list '}'

   67 type: TYPE_INT
   68     | TYPE_FLOAT
   69     | TYPE_CHAR
   70     | TYPE_BOOL
   71     | TYPE_STRING

   72 parameters: type IDENTIFIER
   73           | type IDENTIFIER ',' parameters
   74           | ε

   75 rvalue: INTEGER
   76       | FLOAT
   77       | CHAR
   78       | BOOL
   79       | STRING

   80 enum_list: IDENTIFIER
   81          | IDENTIFIER EQU INTEGER
   82          | IDENTIFIER EQU INTEGER ',' enum_list
   83          | IDENTIFIER ',' enum_list

   84 case_list: case_list CASE rvalue ':' break_stmt_list
   85          | CASE rvalue ':' break_stmt_list

   86 case_default: DEFAULT ':' break_stmt_list

   87 expr_list: expr
   88          | expr_list ',' expr

   89 expr: rvalue
   90     | IDENTIFIER
   91     | expr PLUS expr
   92     | expr MINUS expr
   93     | expr MULT expr
   94     | expr DIV expr
   95     | expr POWER expr
   96     | expr MODULE expr
   97     | expr EQU_EQU expr
   98     | expr NOT_EQU expr
   99     | expr MORE_OR_EQU expr
  100     | expr LESS_OR_EQU expr
  101     | expr MORE expr
  102     | expr LESS expr
  103     | expr AND expr
  104     | expr OR expr
  105     | expr INC
  106     | expr DEC
  107     | NOT expr


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 29 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 64 65 66
    ')' (41) 29 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 64 65 66
    ',' (44) 73 82 83 88
    ':' (58) 84 85 86
    ';' (59) 15 16 17 18 19 20 21 22 23 24 25 29 38 39 40 41 42 43 47 48 49 50 51 52 53 57 61 62 63 64
    '{' (123) 38 39 40 41 44 45 49 50 51 52 54 55 56 57 58 59 60 61 62 65 66
    '}' (125) 38 39 40 41 44 45 49 50 51 52 54 55 56 57 58 59 60 61 62 65 66
    error (256)
    INTEGER <ivalue> (258) 75 81 82
    FLOAT <fvalue> (259) 76
    BOOL <bvalue> (260) 78
    CHAR <cvalue> (261) 77
    STRING <svalue> (262) 79
    TYPE_INT <gvalue> (263) 67
    TYPE_FLOAT <gvalue> (264) 68
    TYPE_CHAR <gvalue> (265) 69
    TYPE_BOOL <gvalue> (266) 70
    TYPE_STRING <gvalue> (267) 71
    TYPE_VOID <gvalue> (268) 43 45
    CONSTANT (269) 22
    ENUM (270) 62 63
    WHILE (271) 64 65 66
    FOR (272) 47 48 49 50 51 52
    BREAK (273) 17 18
    IF (274) 53 54 55 56 57 58 59 60 61
    ELSE (275) 55 56 57 59 60 61
    RETURN (276) 15 16
    SWITCH (277) 40 41
    CASE (278) 84 85
    DEFAULT (279) 86
    PRINT (280) 29
    MINUS (281) 92
    MULT (282) 93
    PLUS (283) 91
    DIV (284) 94
    MODULE (285) 96
    POWER (286) 95
    EQU (287) 20 21 22 23 24 47 49 50 63 81 82
    INC (288) 105
    DEC (289) 106
    MORE (290) 101
    LESS (291) 102
    EQU_EQU (292) 97
    MORE_OR_EQU (293) 99
    LESS_OR_EQU (294) 100
    NOT_EQU (295) 98
    AND (296) 103
    OR (297) 104
    NOT (298) 107
    REPEAT (299) 38 39
    UNTIL (300) 38 39
    IDENTIFIER <gvalue> (301) 19 20 21 22 23 24 40 41 42 43 44 45 46 47 49 50 62 63 72 73 80 81 82 83 90
    COMMENT (302) 12


Nonterminals, with rules where they appear

    $accept (55)
        on left: 0
    program (56)
        on left: 1 2
        on right: 0 1
    stmt (57)
        on left: 3 4 5 6 7 8 9 10 11 12
        on right: 1 2 13 14
    stmt_list (58)
        on left: 13 14
        on right: 14 15 17 38 45 49 51 54 55 56 57 59 65
    func_stmt_list (59)
        on left: 15 16
        on right: 44
    break_stmt_list (60)
        on left: 17 18
        on right: 50 52 66 84 85 86
    genn_stmt (61)
        on left: 19 20 21 22 23 24 25
        on right: 3
    func_stmt (62)
        on left: 26 27 28
        on right: 4
    print_stmt (63)
        on left: 29
        on right: 5
    for_stmt (64)
        on left: 30 31
        on right: 6
    if_stmt (65)
        on left: 32 33
        on right: 7
    enum_stmt (66)
        on left: 34 35
        on right: 8
    while_stmt (67)
        on left: 36 37
        on right: 9
    repeat_stmt (68)
        on left: 38 39
        on right: 10
    switch_stmt (69)
        on left: 40 41
        on right: 11
    func_proto (70)
        on left: 42 43
        on right: 26
    func_define (71)
        on left: 44 45
        on right: 27
    func_call (72)
        on left: 46
        on right: 20 21 28
    for_proto (73)
        on left: 47 48
        on right: 30
    for_define (74)
        on left: 49 50 51 52
        on right: 31
    if_proto (75)
        on left: 53
        on right: 32
    if_define (76)
        on left: 54 55 56 57 58 59 60 61
        on right: 33
    enum_declare (77)
        on left: 62
        on right: 34
    enum_define (78)
        on left: 63
        on right: 35
    while_proto (79)
        on left: 64
        on right: 36
    while_define (80)
        on left: 65 66
        on right: 37
    type <gvalue> (81)
        on left: 67 68 69 70 71
        on right: 19 20 22 24 42 44 72 73
    parameters (82)
        on left: 72 73 74
        on right: 42 43 44 45 73
    rvalue <gvalue> (83)
        on left: 75 76 77 78 79
        on right: 22 84 85 89
    enum_list (84)
        on left: 80 81 82 83
        on right: 62 82 83
    case_list (85)
        on left: 84 85
        on right: 40 84
    case_default (86)
        on left: 86
        on right: 40 41
    expr_list (87)
        on left: 87 88
        on right: 46 88
    expr <gvalue> (88)
        on left: 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107
        on right: 15 16 23 24 25 29 38 39 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 64 65 66 87 88 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107


State 0

    0 $accept: • program $end

    INTEGER      shift, and go to state 1
    FLOAT        shift, and go to state 2
    BOOL         shift, and go to state 3
    CHAR         shift, and go to state 4
    STRING       shift, and go to state 5
    TYPE_INT     shift, and go to state 6
    TYPE_FLOAT   shift, and go to state 7
    TYPE_CHAR    shift, and go to state 8
    TYPE_BOOL    shift, and go to state 9
    TYPE_STRING  shift, and go to state 10
    TYPE_VOID    shift, and go to state 11
    CONSTANT     shift, and go to state 12
    ENUM         shift, and go to state 13
    WHILE        shift, and go to state 14
    FOR          shift, and go to state 15
    IF           shift, and go to state 16
    SWITCH       shift, and go to state 17
    PRINT        shift, and go to state 18
    NOT          shift, and go to state 19
    REPEAT       shift, and go to state 20
    IDENTIFIER   shift, and go to state 21
    COMMENT      shift, and go to state 22

    program       go to state 23
    stmt          go to state 24
    genn_stmt     go to state 25
    func_stmt     go to state 26
    print_stmt    go to state 27
    for_stmt      go to state 28
    if_stmt       go to state 29
    enum_stmt     go to state 30
    while_stmt    go to state 31
    repeat_stmt   go to state 32
    switch_stmt   go to state 33
    func_proto    go to state 34
    func_define   go to state 35
    func_call     go to state 36
    for_proto     go to state 37
    for_define    go to state 38
    if_proto      go to state 39
    if_define     go to state 40
    enum_declare  go to state 41
    enum_define   go to state 42
    while_proto   go to state 43
    while_define  go to state 44
    type          go to state 45
    rvalue        go to state 46
    expr          go to state 47


State 1

   75 rvalue: INTEGER •

    $default  reduce using rule 75 (rvalue)


State 2

   76 rvalue: FLOAT •

    $default  reduce using rule 76 (rvalue)


State 3

   78 rvalue: BOOL •

    $default  reduce using rule 78 (rvalue)


State 4

   77 rvalue: CHAR •

    $default  reduce using rule 77 (rvalue)


State 5

   79 rvalue: STRING •

    $default  reduce using rule 79 (rvalue)


State 6

   67 type: TYPE_INT •

    $default  reduce using rule 67 (type)


State 7

   68 type: TYPE_FLOAT •

    $default  reduce using rule 68 (type)


State 8

   69 type: TYPE_CHAR •

    $default  reduce using rule 69 (type)


State 9

   70 type: TYPE_BOOL •

    $default  reduce using rule 70 (type)


State 10

   71 type: TYPE_STRING •

    $default  reduce using rule 71 (type)


State 11

   43 func_proto: TYPE_VOID • IDENTIFIER '(' parameters ')' ';'
   45 func_define: TYPE_VOID • IDENTIFIER '(' parameters ')' '{' stmt_list '}'

    IDENTIFIER  shift, and go to state 48


State 12

   22 genn_stmt: CONSTANT • type IDENTIFIER EQU rvalue ';'

    TYPE_INT     shift, and go to state 6
    TYPE_FLOAT   shift, and go to state 7
    TYPE_CHAR    shift, and go to state 8
    TYPE_BOOL    shift, and go to state 9
    TYPE_STRING  shift, and go to state 10

    type  go to state 49


State 13

   62 enum_declare: ENUM • IDENTIFIER '{' enum_list '}' ';'
   63 enum_define: ENUM • IDENTIFIER IDENTIFIER EQU IDENTIFIER ';'

    IDENTIFIER  shift, and go to state 50


State 14

   64 while_proto: WHILE • '(' expr ')' ';'
   65 while_define: WHILE • '(' expr ')' '{' stmt_list '}'
   66             | WHILE • '(' expr ')' '{' break_stmt_list '}'

    '('  shift, and go to state 51


State 15

   47 for_proto: FOR • '(' IDENTIFIER EQU expr ';' expr ';' expr ')' ';'
   48          | FOR • '(' expr ';' expr ';' expr ')' ';'
   49 for_define: FOR • '(' IDENTIFIER EQU expr ';' expr ';' expr ')' '{' stmt_list '}'
   50           | FOR • '(' IDENTIFIER EQU expr ';' expr ';' expr ')' '{' break_stmt_list '}'
   51           | FOR • '(' expr ';' expr ';' expr ')' '{' stmt_list '}'
   52           | FOR • '(' expr ';' expr ';' expr ')' '{' break_stmt_list '}'

    '('  shift, and go to state 52


State 16

   53 if_proto: IF • '(' expr ')' ';'
   54 if_define: IF • '(' expr ')' '{' stmt_list '}'
   55          | IF • '(' expr ')' '{' stmt_list '}' ELSE '{' stmt_list '}'
   56          | IF • '(' expr ')' '{' stmt_list '}' ELSE '{' '}'
   57          | IF • '(' expr ')' '{' stmt_list '}' ELSE ';'
   58          | IF • '(' expr ')' '{' '}'
   59          | IF • '(' expr ')' '{' '}' ELSE '{' stmt_list '}'
   60          | IF • '(' expr ')' '{' '}' ELSE '{' '}'
   61          | IF • '(' expr ')' '{' '}' ELSE ';'

    '('  shift, and go to state 53


State 17

   40 switch_stmt: SWITCH • '(' IDENTIFIER ')' '{' case_list case_default '}' ';'
   41            | SWITCH • '(' IDENTIFIER ')' '{' case_default '}' ';'

    '('  shift, and go to state 54


State 18

   29 print_stmt: PRINT • '(' expr ')' ';'

    '('  shift, and go to state 55


State 19

  107 expr: NOT • expr

    INTEGER     shift, and go to state 1
    FLOAT       shift, and go to state 2
    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    STRING      shift, and go to state 5
    NOT         shift, and go to state 19
    IDENTIFIER  shift, and go to state 56

    rvalue  go to state 46
    expr    go to state 57


State 20

   38 repeat_stmt: REPEAT • '{' stmt_list '}' UNTIL '(' expr ')' ';'
   39            | REPEAT • '{' '}' UNTIL '(' expr ')' ';'

    '{'  shift, and go to state 58


State 21

   21 genn_stmt: IDENTIFIER • EQU func_call ';'
   23          | IDENTIFIER • EQU expr ';'
   46 func_call: IDENTIFIER • '(' expr_list ')'
   90 expr: IDENTIFIER •

    EQU  shift, and go to state 59
    '('  shift, and go to state 60

    $default  reduce using rule 90 (expr)


State 22

   12 stmt: COMMENT •

    $default  reduce using rule 12 (stmt)


State 23

    0 $accept: program • $end
    1 program: program • stmt

    $end         shift, and go to state 61
    INTEGER      shift, and go to state 1
    FLOAT        shift, and go to state 2
    BOOL         shift, and go to state 3
    CHAR         shift, and go to state 4
    STRING       shift, and go to state 5
    TYPE_INT     shift, and go to state 6
    TYPE_FLOAT   shift, and go to state 7
    TYPE_CHAR    shift, and go to state 8
    TYPE_BOOL    shift, and go to state 9
    TYPE_STRING  shift, and go to state 10
    TYPE_VOID    shift, and go to state 11
    CONSTANT     shift, and go to state 12
    ENUM         shift, and go to state 13
    WHILE        shift, and go to state 14
    FOR          shift, and go to state 15
    IF           shift, and go to state 16
    SWITCH       shift, and go to state 17
    PRINT        shift, and go to state 18
    NOT          shift, and go to state 19
    REPEAT       shift, and go to state 20
    IDENTIFIER   shift, and go to state 21
    COMMENT      shift, and go to state 22

    stmt          go to state 62
    genn_stmt     go to state 25
    func_stmt     go to state 26
    print_stmt    go to state 27
    for_stmt      go to state 28
    if_stmt       go to state 29
    enum_stmt     go to state 30
    while_stmt    go to state 31
    repeat_stmt   go to state 32
    switch_stmt   go to state 33
    func_proto    go to state 34
    func_define   go to state 35
    func_call     go to state 36
    for_proto     go to state 37
    for_define    go to state 38
    if_proto      go to state 39
    if_define     go to state 40
    enum_declare  go to state 41
    enum_define   go to state 42
    while_proto   go to state 43
    while_define  go to state 44
    type          go to state 45
    rvalue        go to state 46
    expr          go to state 47


State 24

    2 program: stmt •

    $default  reduce using rule 2 (program)


State 25

    3 stmt: genn_stmt •

    $default  reduce using rule 3 (stmt)


State 26

    4 stmt: func_stmt •

    $default  reduce using rule 4 (stmt)


State 27

    5 stmt: print_stmt •

    $default  reduce using rule 5 (stmt)


State 28

    6 stmt: for_stmt •

    $default  reduce using rule 6 (stmt)


State 29

    7 stmt: if_stmt •

    $default  reduce using rule 7 (stmt)


State 30

    8 stmt: enum_stmt •

    $default  reduce using rule 8 (stmt)


State 31

    9 stmt: while_stmt •

    $default  reduce using rule 9 (stmt)


State 32

   10 stmt: repeat_stmt •

    $default  reduce using rule 10 (stmt)


State 33

   11 stmt: switch_stmt •

    $default  reduce using rule 11 (stmt)


State 34

   26 func_stmt: func_proto •

    $default  reduce using rule 26 (func_stmt)


State 35

   27 func_stmt: func_define •

    $default  reduce using rule 27 (func_stmt)


State 36

   28 func_stmt: func_call •

    $default  reduce using rule 28 (func_stmt)


State 37

   30 for_stmt: for_proto •

    $default  reduce using rule 30 (for_stmt)


State 38

   31 for_stmt: for_define •

    $default  reduce using rule 31 (for_stmt)


State 39

   32 if_stmt: if_proto •

    $default  reduce using rule 32 (if_stmt)


State 40

   33 if_stmt: if_define •

    $default  reduce using rule 33 (if_stmt)


State 41

   34 enum_stmt: enum_declare •

    $default  reduce using rule 34 (enum_stmt)


State 42

   35 enum_stmt: enum_define •

    $default  reduce using rule 35 (enum_stmt)


State 43

   36 while_stmt: while_proto •

    $default  reduce using rule 36 (while_stmt)


State 44

   37 while_stmt: while_define •

    $default  reduce using rule 37 (while_stmt)


State 45

   19 genn_stmt: type • IDENTIFIER ';'
   20          | type • IDENTIFIER EQU func_call ';'
   24          | type • IDENTIFIER EQU expr ';'
   42 func_proto: type • IDENTIFIER '(' parameters ')' ';'
   44 func_define: type • IDENTIFIER '(' parameters ')' '{' func_stmt_list '}'

    IDENTIFIER  shift, and go to state 63


State 46

   89 expr: rvalue •

    $default  reduce using rule 89 (expr)


State 47

   25 genn_stmt: expr • ';'
   91 expr: expr • PLUS expr
   92     | expr • MINUS expr
   93     | expr • MULT expr
   94     | expr • DIV expr
   95     | expr • POWER expr
   96     | expr • MODULE expr
   97     | expr • EQU_EQU expr
   98     | expr • NOT_EQU expr
   99     | expr • MORE_OR_EQU expr
  100     | expr • LESS_OR_EQU expr
  101     | expr • MORE expr
  102     | expr • LESS expr
  103     | expr • AND expr
  104     | expr • OR expr
  105     | expr • INC
  106     | expr • DEC

    MINUS        shift, and go to state 64
    MULT         shift, and go to state 65
    PLUS         shift, and go to state 66
    DIV          shift, and go to state 67
    MODULE       shift, and go to state 68
    POWER        shift, and go to state 69
    INC          shift, and go to state 70
    DEC          shift, and go to state 71
    MORE         shift, and go to state 72
    LESS         shift, and go to state 73
    EQU_EQU      shift, and go to state 74
    MORE_OR_EQU  shift, and go to state 75
    LESS_OR_EQU  shift, and go to state 76
    NOT_EQU      shift, and go to state 77
    AND          shift, and go to state 78
    OR           shift, and go to state 79
    ';'          shift, and go to state 80


State 48

   43 func_proto: TYPE_VOID IDENTIFIER • '(' parameters ')' ';'
   45 func_define: TYPE_VOID IDENTIFIER • '(' parameters ')' '{' stmt_list '}'

    '('  shift, and go to state 81


State 49

   22 genn_stmt: CONSTANT type • IDENTIFIER EQU rvalue ';'

    IDENTIFIER  shift, and go to state 82


State 50

   62 enum_declare: ENUM IDENTIFIER • '{' enum_list '}' ';'
   63 enum_define: ENUM IDENTIFIER • IDENTIFIER EQU IDENTIFIER ';'

    IDENTIFIER  shift, and go to state 83
    '{'         shift, and go to state 84


State 51

   64 while_proto: WHILE '(' • expr ')' ';'
   65 while_define: WHILE '(' • expr ')' '{' stmt_list '}'
   66             | WHILE '(' • expr ')' '{' break_stmt_list '}'

    INTEGER     shift, and go to state 1
    FLOAT       shift, and go to state 2
    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    STRING      shift, and go to state 5
    NOT         shift, and go to state 19
    IDENTIFIER  shift, and go to state 56

    rvalue  go to state 46
    expr    go to state 85


State 52

   47 for_proto: FOR '(' • IDENTIFIER EQU expr ';' expr ';' expr ')' ';'
   48          | FOR '(' • expr ';' expr ';' expr ')' ';'
   49 for_define: FOR '(' • IDENTIFIER EQU expr ';' expr ';' expr ')' '{' stmt_list '}'
   50           | FOR '(' • IDENTIFIER EQU expr ';' expr ';' expr ')' '{' break_stmt_list '}'
   51           | FOR '(' • expr ';' expr ';' expr ')' '{' stmt_list '}'
   52           | FOR '(' • expr ';' expr ';' expr ')' '{' break_stmt_list '}'

    INTEGER     shift, and go to state 1
    FLOAT       shift, and go to state 2
    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    STRING      shift, and go to state 5
    NOT         shift, and go to state 19
    IDENTIFIER  shift, and go to state 86

    rvalue  go to state 46
    expr    go to state 87


State 53

   53 if_proto: IF '(' • expr ')' ';'
   54 if_define: IF '(' • expr ')' '{' stmt_list '}'
   55          | IF '(' • expr ')' '{' stmt_list '}' ELSE '{' stmt_list '}'
   56          | IF '(' • expr ')' '{' stmt_list '}' ELSE '{' '}'
   57          | IF '(' • expr ')' '{' stmt_list '}' ELSE ';'
   58          | IF '(' • expr ')' '{' '}'
   59          | IF '(' • expr ')' '{' '}' ELSE '{' stmt_list '}'
   60          | IF '(' • expr ')' '{' '}' ELSE '{' '}'
   61          | IF '(' • expr ')' '{' '}' ELSE ';'

    INTEGER     shift, and go to state 1
    FLOAT       shift, and go to state 2
    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    STRING      shift, and go to state 5
    NOT         shift, and go to state 19
    IDENTIFIER  shift, and go to state 56

    rvalue  go to state 46
    expr    go to state 88


State 54

   40 switch_stmt: SWITCH '(' • IDENTIFIER ')' '{' case_list case_default '}' ';'
   41            | SWITCH '(' • IDENTIFIER ')' '{' case_default '}' ';'

    IDENTIFIER  shift, and go to state 89


State 55

   29 print_stmt: PRINT '(' • expr ')' ';'

    INTEGER     shift, and go to state 1
    FLOAT       shift, and go to state 2
    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    STRING      shift, and go to state 5
    NOT         shift, and go to state 19
    IDENTIFIER  shift, and go to state 56

    rvalue  go to state 46
    expr    go to state 90


State 56

   90 expr: IDENTIFIER •

    $default  reduce using rule 90 (expr)


State 57

   91 expr: expr • PLUS expr
   92     | expr • MINUS expr
   93     | expr • MULT expr
   94     | expr • DIV expr
   95     | expr • POWER expr
   96     | expr • MODULE expr
   97     | expr • EQU_EQU expr
   98     | expr • NOT_EQU expr
   99     | expr • MORE_OR_EQU expr
  100     | expr • LESS_OR_EQU expr
  101     | expr • MORE expr
  102     | expr • LESS expr
  103     | expr • AND expr
  104     | expr • OR expr
  105     | expr • INC
  106     | expr • DEC
  107     | NOT expr •

    $default  reduce using rule 107 (expr)


State 58

   38 repeat_stmt: REPEAT '{' • stmt_list '}' UNTIL '(' expr ')' ';'
   39            | REPEAT '{' • '}' UNTIL '(' expr ')' ';'

    INTEGER      shift, and go to state 1
    FLOAT        shift, and go to state 2
    BOOL         shift, and go to state 3
    CHAR         shift, and go to state 4
    STRING       shift, and go to state 5
    TYPE_INT     shift, and go to state 6
    TYPE_FLOAT   shift, and go to state 7
    TYPE_CHAR    shift, and go to state 8
    TYPE_BOOL    shift, and go to state 9
    TYPE_STRING  shift, and go to state 10
    TYPE_VOID    shift, and go to state 11
    CONSTANT     shift, and go to state 12
    ENUM         shift, and go to state 13
    WHILE        shift, and go to state 14
    FOR          shift, and go to state 15
    IF           shift, and go to state 16
    SWITCH       shift, and go to state 17
    PRINT        shift, and go to state 18
    NOT          shift, and go to state 19
    REPEAT       shift, and go to state 20
    IDENTIFIER   shift, and go to state 21
    COMMENT      shift, and go to state 22
    '}'          shift, and go to state 91

    stmt          go to state 92
    stmt_list     go to state 93
    genn_stmt     go to state 25
    func_stmt     go to state 26
    print_stmt    go to state 27
    for_stmt      go to state 28
    if_stmt       go to state 29
    enum_stmt     go to state 30
    while_stmt    go to state 31
    repeat_stmt   go to state 32
    switch_stmt   go to state 33
    func_proto    go to state 34
    func_define   go to state 35
    func_call     go to state 36
    for_proto     go to state 37
    for_define    go to state 38
    if_proto      go to state 39
    if_define     go to state 40
    enum_declare  go to state 41
    enum_define   go to state 42
    while_proto   go to state 43
    while_define  go to state 44
    type          go to state 45
    rvalue        go to state 46
    expr          go to state 47


State 59

   21 genn_stmt: IDENTIFIER EQU • func_call ';'
   23          | IDENTIFIER EQU • expr ';'

    INTEGER     shift, and go to state 1
    FLOAT       shift, and go to state 2
    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    STRING      shift, and go to state 5
    NOT         shift, and go to state 19
    IDENTIFIER  shift, and go to state 94

    func_call  go to state 95
    rvalue     go to state 46
    expr       go to state 96


State 60

   46 func_call: IDENTIFIER '(' • expr_list ')'

    INTEGER     shift, and go to state 1
    FLOAT       shift, and go to state 2
    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    STRING      shift, and go to state 5
    NOT         shift, and go to state 19
    IDENTIFIER  shift, and go to state 56

    rvalue     go to state 46
    expr_list  go to state 97
    expr       go to state 98


State 61

    0 $accept: program $end •

    $default  accept


State 62

    1 program: program stmt •

    $default  reduce using rule 1 (program)


State 63

   19 genn_stmt: type IDENTIFIER • ';'
   20          | type IDENTIFIER • EQU func_call ';'
   24          | type IDENTIFIER • EQU expr ';'
   42 func_proto: type IDENTIFIER • '(' parameters ')' ';'
   44 func_define: type IDENTIFIER • '(' parameters ')' '{' func_stmt_list '}'

    EQU  shift, and go to state 99
    ';'  shift, and go to state 100
    '('  shift, and go to state 101


State 64

   92 expr: expr MINUS • expr

    INTEGER     shift, and go to state 1
    FLOAT       shift, and go to state 2
    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    STRING      shift, and go to state 5
    NOT         shift, and go to state 19
    IDENTIFIER  shift, and go to state 56

    rvalue  go to state 46
    expr    go to state 102


State 65

   93 expr: expr MULT • expr

    INTEGER     shift, and go to state 1
    FLOAT       shift, and go to state 2
    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    STRING      shift, and go to state 5
    NOT         shift, and go to state 19
    IDENTIFIER  shift, and go to state 56

    rvalue  go to state 46
    expr    go to state 103


State 66

   91 expr: expr PLUS • expr

    INTEGER     shift, and go to state 1
    FLOAT       shift, and go to state 2
    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    STRING      shift, and go to state 5
    NOT         shift, and go to state 19
    IDENTIFIER  shift, and go to state 56

    rvalue  go to state 46
    expr    go to state 104


State 67

   94 expr: expr DIV • expr

    INTEGER     shift, and go to state 1
    FLOAT       shift, and go to state 2
    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    STRING      shift, and go to state 5
    NOT         shift, and go to state 19
    IDENTIFIER  shift, and go to state 56

    rvalue  go to state 46
    expr    go to state 105


State 68

   96 expr: expr MODULE • expr

    INTEGER     shift, and go to state 1
    FLOAT       shift, and go to state 2
    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    STRING      shift, and go to state 5
    NOT         shift, and go to state 19
    IDENTIFIER  shift, and go to state 56

    rvalue  go to state 46
    expr    go to state 106


State 69

   95 expr: expr POWER • expr

    INTEGER     shift, and go to state 1
    FLOAT       shift, and go to state 2
    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    STRING      shift, and go to state 5
    NOT         shift, and go to state 19
    IDENTIFIER  shift, and go to state 56

    rvalue  go to state 46
    expr    go to state 107


State 70

  105 expr: expr INC •

    $default  reduce using rule 105 (expr)


State 71

  106 expr: expr DEC •

    $default  reduce using rule 106 (expr)


State 72

  101 expr: expr MORE • expr

    INTEGER     shift, and go to state 1
    FLOAT       shift, and go to state 2
    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    STRING      shift, and go to state 5
    NOT         shift, and go to state 19
    IDENTIFIER  shift, and go to state 56

    rvalue  go to state 46
    expr    go to state 108


State 73

  102 expr: expr LESS • expr

    INTEGER     shift, and go to state 1
    FLOAT       shift, and go to state 2
    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    STRING      shift, and go to state 5
    NOT         shift, and go to state 19
    IDENTIFIER  shift, and go to state 56

    rvalue  go to state 46
    expr    go to state 109


State 74

   97 expr: expr EQU_EQU • expr

    INTEGER     shift, and go to state 1
    FLOAT       shift, and go to state 2
    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    STRING      shift, and go to state 5
    NOT         shift, and go to state 19
    IDENTIFIER  shift, and go to state 56

    rvalue  go to state 46
    expr    go to state 110


State 75

   99 expr: expr MORE_OR_EQU • expr

    INTEGER     shift, and go to state 1
    FLOAT       shift, and go to state 2
    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    STRING      shift, and go to state 5
    NOT         shift, and go to state 19
    IDENTIFIER  shift, and go to state 56

    rvalue  go to state 46
    expr    go to state 111


State 76

  100 expr: expr LESS_OR_EQU • expr

    INTEGER     shift, and go to state 1
    FLOAT       shift, and go to state 2
    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    STRING      shift, and go to state 5
    NOT         shift, and go to state 19
    IDENTIFIER  shift, and go to state 56

    rvalue  go to state 46
    expr    go to state 112


State 77

   98 expr: expr NOT_EQU • expr

    INTEGER     shift, and go to state 1
    FLOAT       shift, and go to state 2
    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    STRING      shift, and go to state 5
    NOT         shift, and go to state 19
    IDENTIFIER  shift, and go to state 56

    rvalue  go to state 46
    expr    go to state 113


State 78

  103 expr: expr AND • expr

    INTEGER     shift, and go to state 1
    FLOAT       shift, and go to state 2
    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    STRING      shift, and go to state 5
    NOT         shift, and go to state 19
    IDENTIFIER  shift, and go to state 56

    rvalue  go to state 46
    expr    go to state 114


State 79

  104 expr: expr OR • expr

    INTEGER     shift, and go to state 1
    FLOAT       shift, and go to state 2
    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    STRING      shift, and go to state 5
    NOT         shift, and go to state 19
    IDENTIFIER  shift, and go to state 56

    rvalue  go to state 46
    expr    go to state 115


State 80

   25 genn_stmt: expr ';' •

    $default  reduce using rule 25 (genn_stmt)


State 81

   43 func_proto: TYPE_VOID IDENTIFIER '(' • parameters ')' ';'
   45 func_define: TYPE_VOID IDENTIFIER '(' • parameters ')' '{' stmt_list '}'

    TYPE_INT     shift, and go to state 6
    TYPE_FLOAT   shift, and go to state 7
    TYPE_CHAR    shift, and go to state 8
    TYPE_BOOL    shift, and go to state 9
    TYPE_STRING  shift, and go to state 10

    $default  reduce using rule 74 (parameters)

    type        go to state 116
    parameters  go to state 117


State 82

   22 genn_stmt: CONSTANT type IDENTIFIER • EQU rvalue ';'

    EQU  shift, and go to state 118


State 83

   63 enum_define: ENUM IDENTIFIER IDENTIFIER • EQU IDENTIFIER ';'

    EQU  shift, and go to state 119


State 84

   62 enum_declare: ENUM IDENTIFIER '{' • enum_list '}' ';'

    IDENTIFIER  shift, and go to state 120

    enum_list  go to state 121


State 85

   64 while_proto: WHILE '(' expr • ')' ';'
   65 while_define: WHILE '(' expr • ')' '{' stmt_list '}'
   66             | WHILE '(' expr • ')' '{' break_stmt_list '}'
   91 expr: expr • PLUS expr
   92     | expr • MINUS expr
   93     | expr • MULT expr
   94     | expr • DIV expr
   95     | expr • POWER expr
   96     | expr • MODULE expr
   97     | expr • EQU_EQU expr
   98     | expr • NOT_EQU expr
   99     | expr • MORE_OR_EQU expr
  100     | expr • LESS_OR_EQU expr
  101     | expr • MORE expr
  102     | expr • LESS expr
  103     | expr • AND expr
  104     | expr • OR expr
  105     | expr • INC
  106     | expr • DEC

    MINUS        shift, and go to state 64
    MULT         shift, and go to state 65
    PLUS         shift, and go to state 66
    DIV          shift, and go to state 67
    MODULE       shift, and go to state 68
    POWER        shift, and go to state 69
    INC          shift, and go to state 70
    DEC          shift, and go to state 71
    MORE         shift, and go to state 72
    LESS         shift, and go to state 73
    EQU_EQU      shift, and go to state 74
    MORE_OR_EQU  shift, and go to state 75
    LESS_OR_EQU  shift, and go to state 76
    NOT_EQU      shift, and go to state 77
    AND          shift, and go to state 78
    OR           shift, and go to state 79
    ')'          shift, and go to state 122


State 86

   47 for_proto: FOR '(' IDENTIFIER • EQU expr ';' expr ';' expr ')' ';'
   49 for_define: FOR '(' IDENTIFIER • EQU expr ';' expr ';' expr ')' '{' stmt_list '}'
   50           | FOR '(' IDENTIFIER • EQU expr ';' expr ';' expr ')' '{' break_stmt_list '}'
   90 expr: IDENTIFIER •

    EQU  shift, and go to state 123

    $default  reduce using rule 90 (expr)


State 87

   48 for_proto: FOR '(' expr • ';' expr ';' expr ')' ';'
   51 for_define: FOR '(' expr • ';' expr ';' expr ')' '{' stmt_list '}'
   52           | FOR '(' expr • ';' expr ';' expr ')' '{' break_stmt_list '}'
   91 expr: expr • PLUS expr
   92     | expr • MINUS expr
   93     | expr • MULT expr
   94     | expr • DIV expr
   95     | expr • POWER expr
   96     | expr • MODULE expr
   97     | expr • EQU_EQU expr
   98     | expr • NOT_EQU expr
   99     | expr • MORE_OR_EQU expr
  100     | expr • LESS_OR_EQU expr
  101     | expr • MORE expr
  102     | expr • LESS expr
  103     | expr • AND expr
  104     | expr • OR expr
  105     | expr • INC
  106     | expr • DEC

    MINUS        shift, and go to state 64
    MULT         shift, and go to state 65
    PLUS         shift, and go to state 66
    DIV          shift, and go to state 67
    MODULE       shift, and go to state 68
    POWER        shift, and go to state 69
    INC          shift, and go to state 70
    DEC          shift, and go to state 71
    MORE         shift, and go to state 72
    LESS         shift, and go to state 73
    EQU_EQU      shift, and go to state 74
    MORE_OR_EQU  shift, and go to state 75
    LESS_OR_EQU  shift, and go to state 76
    NOT_EQU      shift, and go to state 77
    AND          shift, and go to state 78
    OR           shift, and go to state 79
    ';'          shift, and go to state 124


State 88

   53 if_proto: IF '(' expr • ')' ';'
   54 if_define: IF '(' expr • ')' '{' stmt_list '}'
   55          | IF '(' expr • ')' '{' stmt_list '}' ELSE '{' stmt_list '}'
   56          | IF '(' expr • ')' '{' stmt_list '}' ELSE '{' '}'
   57          | IF '(' expr • ')' '{' stmt_list '}' ELSE ';'
   58          | IF '(' expr • ')' '{' '}'
   59          | IF '(' expr • ')' '{' '}' ELSE '{' stmt_list '}'
   60          | IF '(' expr • ')' '{' '}' ELSE '{' '}'
   61          | IF '(' expr • ')' '{' '}' ELSE ';'
   91 expr: expr • PLUS expr
   92     | expr • MINUS expr
   93     | expr • MULT expr
   94     | expr • DIV expr
   95     | expr • POWER expr
   96     | expr • MODULE expr
   97     | expr • EQU_EQU expr
   98     | expr • NOT_EQU expr
   99     | expr • MORE_OR_EQU expr
  100     | expr • LESS_OR_EQU expr
  101     | expr • MORE expr
  102     | expr • LESS expr
  103     | expr • AND expr
  104     | expr • OR expr
  105     | expr • INC
  106     | expr • DEC

    MINUS        shift, and go to state 64
    MULT         shift, and go to state 65
    PLUS         shift, and go to state 66
    DIV          shift, and go to state 67
    MODULE       shift, and go to state 68
    POWER        shift, and go to state 69
    INC          shift, and go to state 70
    DEC          shift, and go to state 71
    MORE         shift, and go to state 72
    LESS         shift, and go to state 73
    EQU_EQU      shift, and go to state 74
    MORE_OR_EQU  shift, and go to state 75
    LESS_OR_EQU  shift, and go to state 76
    NOT_EQU      shift, and go to state 77
    AND          shift, and go to state 78
    OR           shift, and go to state 79
    ')'          shift, and go to state 125


State 89

   40 switch_stmt: SWITCH '(' IDENTIFIER • ')' '{' case_list case_default '}' ';'
   41            | SWITCH '(' IDENTIFIER • ')' '{' case_default '}' ';'

    ')'  shift, and go to state 126


State 90

   29 print_stmt: PRINT '(' expr • ')' ';'
   91 expr: expr • PLUS expr
   92     | expr • MINUS expr
   93     | expr • MULT expr
   94     | expr • DIV expr
   95     | expr • POWER expr
   96     | expr • MODULE expr
   97     | expr • EQU_EQU expr
   98     | expr • NOT_EQU expr
   99     | expr • MORE_OR_EQU expr
  100     | expr • LESS_OR_EQU expr
  101     | expr • MORE expr
  102     | expr • LESS expr
  103     | expr • AND expr
  104     | expr • OR expr
  105     | expr • INC
  106     | expr • DEC

    MINUS        shift, and go to state 64
    MULT         shift, and go to state 65
    PLUS         shift, and go to state 66
    DIV          shift, and go to state 67
    MODULE       shift, and go to state 68
    POWER        shift, and go to state 69
    INC          shift, and go to state 70
    DEC          shift, and go to state 71
    MORE         shift, and go to state 72
    LESS         shift, and go to state 73
    EQU_EQU      shift, and go to state 74
    MORE_OR_EQU  shift, and go to state 75
    LESS_OR_EQU  shift, and go to state 76
    NOT_EQU      shift, and go to state 77
    AND          shift, and go to state 78
    OR           shift, and go to state 79
    ')'          shift, and go to state 127


State 91

   39 repeat_stmt: REPEAT '{' '}' • UNTIL '(' expr ')' ';'

    UNTIL  shift, and go to state 128


State 92

   13 stmt_list: stmt •

    $default  reduce using rule 13 (stmt_list)


State 93

   14 stmt_list: stmt_list • stmt
   38 repeat_stmt: REPEAT '{' stmt_list • '}' UNTIL '(' expr ')' ';'

    INTEGER      shift, and go to state 1
    FLOAT        shift, and go to state 2
    BOOL         shift, and go to state 3
    CHAR         shift, and go to state 4
    STRING       shift, and go to state 5
    TYPE_INT     shift, and go to state 6
    TYPE_FLOAT   shift, and go to state 7
    TYPE_CHAR    shift, and go to state 8
    TYPE_BOOL    shift, and go to state 9
    TYPE_STRING  shift, and go to state 10
    TYPE_VOID    shift, and go to state 11
    CONSTANT     shift, and go to state 12
    ENUM         shift, and go to state 13
    WHILE        shift, and go to state 14
    FOR          shift, and go to state 15
    IF           shift, and go to state 16
    SWITCH       shift, and go to state 17
    PRINT        shift, and go to state 18
    NOT          shift, and go to state 19
    REPEAT       shift, and go to state 20
    IDENTIFIER   shift, and go to state 21
    COMMENT      shift, and go to state 22
    '}'          shift, and go to state 129

    stmt          go to state 130
    genn_stmt     go to state 25
    func_stmt     go to state 26
    print_stmt    go to state 27
    for_stmt      go to state 28
    if_stmt       go to state 29
    enum_stmt     go to state 30
    while_stmt    go to state 31
    repeat_stmt   go to state 32
    switch_stmt   go to state 33
    func_proto    go to state 34
    func_define   go to state 35
    func_call     go to state 36
    for_proto     go to state 37
    for_define    go to state 38
    if_proto      go to state 39
    if_define     go to state 40
    enum_declare  go to state 41
    enum_define   go to state 42
    while_proto   go to state 43
    while_define  go to state 44
    type          go to state 45
    rvalue        go to state 46
    expr          go to state 47


State 94

   46 func_call: IDENTIFIER • '(' expr_list ')'
   90 expr: IDENTIFIER •

    '('  shift, and go to state 60

    $default  reduce using rule 90 (expr)


State 95

   21 genn_stmt: IDENTIFIER EQU func_call • ';'

    ';'  shift, and go to state 131


State 96

   23 genn_stmt: IDENTIFIER EQU expr • ';'
   91 expr: expr • PLUS expr
   92     | expr • MINUS expr
   93     | expr • MULT expr
   94     | expr • DIV expr
   95     | expr • POWER expr
   96     | expr • MODULE expr
   97     | expr • EQU_EQU expr
   98     | expr • NOT_EQU expr
   99     | expr • MORE_OR_EQU expr
  100     | expr • LESS_OR_EQU expr
  101     | expr • MORE expr
  102     | expr • LESS expr
  103     | expr • AND expr
  104     | expr • OR expr
  105     | expr • INC
  106     | expr • DEC

    MINUS        shift, and go to state 64
    MULT         shift, and go to state 65
    PLUS         shift, and go to state 66
    DIV          shift, and go to state 67
    MODULE       shift, and go to state 68
    POWER        shift, and go to state 69
    INC          shift, and go to state 70
    DEC          shift, and go to state 71
    MORE         shift, and go to state 72
    LESS         shift, and go to state 73
    EQU_EQU      shift, and go to state 74
    MORE_OR_EQU  shift, and go to state 75
    LESS_OR_EQU  shift, and go to state 76
    NOT_EQU      shift, and go to state 77
    AND          shift, and go to state 78
    OR           shift, and go to state 79
    ';'          shift, and go to state 132


State 97

   46 func_call: IDENTIFIER '(' expr_list • ')'
   88 expr_list: expr_list • ',' expr

    ')'  shift, and go to state 133
    ','  shift, and go to state 134


State 98

   87 expr_list: expr •
   91 expr: expr • PLUS expr
   92     | expr • MINUS expr
   93     | expr • MULT expr
   94     | expr • DIV expr
   95     | expr • POWER expr
   96     | expr • MODULE expr
   97     | expr • EQU_EQU expr
   98     | expr • NOT_EQU expr
   99     | expr • MORE_OR_EQU expr
  100     | expr • LESS_OR_EQU expr
  101     | expr • MORE expr
  102     | expr • LESS expr
  103     | expr • AND expr
  104     | expr • OR expr
  105     | expr • INC
  106     | expr • DEC

    MINUS        shift, and go to state 64
    MULT         shift, and go to state 65
    PLUS         shift, and go to state 66
    DIV          shift, and go to state 67
    MODULE       shift, and go to state 68
    POWER        shift, and go to state 69
    INC          shift, and go to state 70
    DEC          shift, and go to state 71
    MORE         shift, and go to state 72
    LESS         shift, and go to state 73
    EQU_EQU      shift, and go to state 74
    MORE_OR_EQU  shift, and go to state 75
    LESS_OR_EQU  shift, and go to state 76
    NOT_EQU      shift, and go to state 77
    AND          shift, and go to state 78
    OR           shift, and go to state 79

    $default  reduce using rule 87 (expr_list)


State 99

   20 genn_stmt: type IDENTIFIER EQU • func_call ';'
   24          | type IDENTIFIER EQU • expr ';'

    INTEGER     shift, and go to state 1
    FLOAT       shift, and go to state 2
    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    STRING      shift, and go to state 5
    NOT         shift, and go to state 19
    IDENTIFIER  shift, and go to state 94

    func_call  go to state 135
    rvalue     go to state 46
    expr       go to state 136


State 100

   19 genn_stmt: type IDENTIFIER ';' •

    $default  reduce using rule 19 (genn_stmt)


State 101

   42 func_proto: type IDENTIFIER '(' • parameters ')' ';'
   44 func_define: type IDENTIFIER '(' • parameters ')' '{' func_stmt_list '}'

    TYPE_INT     shift, and go to state 6
    TYPE_FLOAT   shift, and go to state 7
    TYPE_CHAR    shift, and go to state 8
    TYPE_BOOL    shift, and go to state 9
    TYPE_STRING  shift, and go to state 10

    $default  reduce using rule 74 (parameters)

    type        go to state 116
    parameters  go to state 137


State 102

   91 expr: expr • PLUS expr
   92     | expr • MINUS expr
   92     | expr MINUS expr •
   93     | expr • MULT expr
   94     | expr • DIV expr
   95     | expr • POWER expr
   96     | expr • MODULE expr
   97     | expr • EQU_EQU expr
   98     | expr • NOT_EQU expr
   99     | expr • MORE_OR_EQU expr
  100     | expr • LESS_OR_EQU expr
  101     | expr • MORE expr
  102     | expr • LESS expr
  103     | expr • AND expr
  104     | expr • OR expr
  105     | expr • INC
  106     | expr • DEC

    MULT         shift, and go to state 65
    DIV          shift, and go to state 67
    MODULE       shift, and go to state 68
    POWER        shift, and go to state 69
    INC          shift, and go to state 70
    DEC          shift, and go to state 71
    MORE         shift, and go to state 72
    LESS         shift, and go to state 73
    EQU_EQU      shift, and go to state 74
    MORE_OR_EQU  shift, and go to state 75
    LESS_OR_EQU  shift, and go to state 76
    NOT_EQU      shift, and go to state 77
    AND          shift, and go to state 78
    OR           shift, and go to state 79

    $default  reduce using rule 92 (expr)


State 103

   91 expr: expr • PLUS expr
   92     | expr • MINUS expr
   93     | expr • MULT expr
   93     | expr MULT expr •
   94     | expr • DIV expr
   95     | expr • POWER expr
   96     | expr • MODULE expr
   97     | expr • EQU_EQU expr
   98     | expr • NOT_EQU expr
   99     | expr • MORE_OR_EQU expr
  100     | expr • LESS_OR_EQU expr
  101     | expr • MORE expr
  102     | expr • LESS expr
  103     | expr • AND expr
  104     | expr • OR expr
  105     | expr • INC
  106     | expr • DEC

    MODULE       shift, and go to state 68
    POWER        shift, and go to state 69
    INC          shift, and go to state 70
    DEC          shift, and go to state 71
    MORE         shift, and go to state 72
    LESS         shift, and go to state 73
    EQU_EQU      shift, and go to state 74
    MORE_OR_EQU  shift, and go to state 75
    LESS_OR_EQU  shift, and go to state 76
    NOT_EQU      shift, and go to state 77
    AND          shift, and go to state 78
    OR           shift, and go to state 79

    $default  reduce using rule 93 (expr)


State 104

   91 expr: expr • PLUS expr
   91     | expr PLUS expr •
   92     | expr • MINUS expr
   93     | expr • MULT expr
   94     | expr • DIV expr
   95     | expr • POWER expr
   96     | expr • MODULE expr
   97     | expr • EQU_EQU expr
   98     | expr • NOT_EQU expr
   99     | expr • MORE_OR_EQU expr
  100     | expr • LESS_OR_EQU expr
  101     | expr • MORE expr
  102     | expr • LESS expr
  103     | expr • AND expr
  104     | expr • OR expr
  105     | expr • INC
  106     | expr • DEC

    MULT         shift, and go to state 65
    DIV          shift, and go to state 67
    MODULE       shift, and go to state 68
    POWER        shift, and go to state 69
    INC          shift, and go to state 70
    DEC          shift, and go to state 71
    MORE         shift, and go to state 72
    LESS         shift, and go to state 73
    EQU_EQU      shift, and go to state 74
    MORE_OR_EQU  shift, and go to state 75
    LESS_OR_EQU  shift, and go to state 76
    NOT_EQU      shift, and go to state 77
    AND          shift, and go to state 78
    OR           shift, and go to state 79

    $default  reduce using rule 91 (expr)


State 105

   91 expr: expr • PLUS expr
   92     | expr • MINUS expr
   93     | expr • MULT expr
   94     | expr • DIV expr
   94     | expr DIV expr •
   95     | expr • POWER expr
   96     | expr • MODULE expr
   97     | expr • EQU_EQU expr
   98     | expr • NOT_EQU expr
   99     | expr • MORE_OR_EQU expr
  100     | expr • LESS_OR_EQU expr
  101     | expr • MORE expr
  102     | expr • LESS expr
  103     | expr • AND expr
  104     | expr • OR expr
  105     | expr • INC
  106     | expr • DEC

    MODULE       shift, and go to state 68
    POWER        shift, and go to state 69
    INC          shift, and go to state 70
    DEC          shift, and go to state 71
    MORE         shift, and go to state 72
    LESS         shift, and go to state 73
    EQU_EQU      shift, and go to state 74
    MORE_OR_EQU  shift, and go to state 75
    LESS_OR_EQU  shift, and go to state 76
    NOT_EQU      shift, and go to state 77
    AND          shift, and go to state 78
    OR           shift, and go to state 79

    $default  reduce using rule 94 (expr)


State 106

   91 expr: expr • PLUS expr
   92     | expr • MINUS expr
   93     | expr • MULT expr
   94     | expr • DIV expr
   95     | expr • POWER expr
   96     | expr • MODULE expr
   96     | expr MODULE expr •
   97     | expr • EQU_EQU expr
   98     | expr • NOT_EQU expr
   99     | expr • MORE_OR_EQU expr
  100     | expr • LESS_OR_EQU expr
  101     | expr • MORE expr
  102     | expr • LESS expr
  103     | expr • AND expr
  104     | expr • OR expr
  105     | expr • INC
  106     | expr • DEC

    POWER        shift, and go to state 69
    INC          shift, and go to state 70
    DEC          shift, and go to state 71
    MORE         shift, and go to state 72
    LESS         shift, and go to state 73
    EQU_EQU      shift, and go to state 74
    MORE_OR_EQU  shift, and go to state 75
    LESS_OR_EQU  shift, and go to state 76
    NOT_EQU      shift, and go to state 77
    AND          shift, and go to state 78
    OR           shift, and go to state 79

    $default  reduce using rule 96 (expr)


State 107

   91 expr: expr • PLUS expr
   92     | expr • MINUS expr
   93     | expr • MULT expr
   94     | expr • DIV expr
   95     | expr • POWER expr
   95     | expr POWER expr •
   96     | expr • MODULE expr
   97     | expr • EQU_EQU expr
   98     | expr • NOT_EQU expr
   99     | expr • MORE_OR_EQU expr
  100     | expr • LESS_OR_EQU expr
  101     | expr • MORE expr
  102     | expr • LESS expr
  103     | expr • AND expr
  104     | expr • OR expr
  105     | expr • INC
  106     | expr • DEC

    POWER        shift, and go to state 69
    INC          shift, and go to state 70
    DEC          shift, and go to state 71
    MORE         shift, and go to state 72
    LESS         shift, and go to state 73
    EQU_EQU      shift, and go to state 74
    MORE_OR_EQU  shift, and go to state 75
    LESS_OR_EQU  shift, and go to state 76
    NOT_EQU      shift, and go to state 77
    AND          shift, and go to state 78
    OR           shift, and go to state 79

    $default  reduce using rule 95 (expr)


State 108

   91 expr: expr • PLUS expr
   92     | expr • MINUS expr
   93     | expr • MULT expr
   94     | expr • DIV expr
   95     | expr • POWER expr
   96     | expr • MODULE expr
   97     | expr • EQU_EQU expr
   98     | expr • NOT_EQU expr
   99     | expr • MORE_OR_EQU expr
  100     | expr • LESS_OR_EQU expr
  101     | expr • MORE expr
  101     | expr MORE expr •
  102     | expr • LESS expr
  103     | expr • AND expr
  104     | expr • OR expr
  105     | expr • INC
  106     | expr • DEC

    AND  shift, and go to state 78
    OR   shift, and go to state 79

    $default  reduce using rule 101 (expr)


State 109

   91 expr: expr • PLUS expr
   92     | expr • MINUS expr
   93     | expr • MULT expr
   94     | expr • DIV expr
   95     | expr • POWER expr
   96     | expr • MODULE expr
   97     | expr • EQU_EQU expr
   98     | expr • NOT_EQU expr
   99     | expr • MORE_OR_EQU expr
  100     | expr • LESS_OR_EQU expr
  101     | expr • MORE expr
  102     | expr • LESS expr
  102     | expr LESS expr •
  103     | expr • AND expr
  104     | expr • OR expr
  105     | expr • INC
  106     | expr • DEC

    AND  shift, and go to state 78
    OR   shift, and go to state 79

    $default  reduce using rule 102 (expr)


State 110

   91 expr: expr • PLUS expr
   92     | expr • MINUS expr
   93     | expr • MULT expr
   94     | expr • DIV expr
   95     | expr • POWER expr
   96     | expr • MODULE expr
   97     | expr • EQU_EQU expr
   97     | expr EQU_EQU expr •
   98     | expr • NOT_EQU expr
   99     | expr • MORE_OR_EQU expr
  100     | expr • LESS_OR_EQU expr
  101     | expr • MORE expr
  102     | expr • LESS expr
  103     | expr • AND expr
  104     | expr • OR expr
  105     | expr • INC
  106     | expr • DEC

    AND  shift, and go to state 78
    OR   shift, and go to state 79

    $default  reduce using rule 97 (expr)


State 111

   91 expr: expr • PLUS expr
   92     | expr • MINUS expr
   93     | expr • MULT expr
   94     | expr • DIV expr
   95     | expr • POWER expr
   96     | expr • MODULE expr
   97     | expr • EQU_EQU expr
   98     | expr • NOT_EQU expr
   99     | expr • MORE_OR_EQU expr
   99     | expr MORE_OR_EQU expr •
  100     | expr • LESS_OR_EQU expr
  101     | expr • MORE expr
  102     | expr • LESS expr
  103     | expr • AND expr
  104     | expr • OR expr
  105     | expr • INC
  106     | expr • DEC

    AND  shift, and go to state 78
    OR   shift, and go to state 79

    $default  reduce using rule 99 (expr)


State 112

   91 expr: expr • PLUS expr
   92     | expr • MINUS expr
   93     | expr • MULT expr
   94     | expr • DIV expr
   95     | expr • POWER expr
   96     | expr • MODULE expr
   97     | expr • EQU_EQU expr
   98     | expr • NOT_EQU expr
   99     | expr • MORE_OR_EQU expr
  100     | expr • LESS_OR_EQU expr
  100     | expr LESS_OR_EQU expr •
  101     | expr • MORE expr
  102     | expr • LESS expr
  103     | expr • AND expr
  104     | expr • OR expr
  105     | expr • INC
  106     | expr • DEC

    AND  shift, and go to state 78
    OR   shift, and go to state 79

    $default  reduce using rule 100 (expr)


State 113

   91 expr: expr • PLUS expr
   92     | expr • MINUS expr
   93     | expr • MULT expr
   94     | expr • DIV expr
   95     | expr • POWER expr
   96     | expr • MODULE expr
   97     | expr • EQU_EQU expr
   98     | expr • NOT_EQU expr
   98     | expr NOT_EQU expr •
   99     | expr • MORE_OR_EQU expr
  100     | expr • LESS_OR_EQU expr
  101     | expr • MORE expr
  102     | expr • LESS expr
  103     | expr • AND expr
  104     | expr • OR expr
  105     | expr • INC
  106     | expr • DEC

    AND  shift, and go to state 78
    OR   shift, and go to state 79

    $default  reduce using rule 98 (expr)


State 114

   91 expr: expr • PLUS expr
   92     | expr • MINUS expr
   93     | expr • MULT expr
   94     | expr • DIV expr
   95     | expr • POWER expr
   96     | expr • MODULE expr
   97     | expr • EQU_EQU expr
   98     | expr • NOT_EQU expr
   99     | expr • MORE_OR_EQU expr
  100     | expr • LESS_OR_EQU expr
  101     | expr • MORE expr
  102     | expr • LESS expr
  103     | expr • AND expr
  103     | expr AND expr •
  104     | expr • OR expr
  105     | expr • INC
  106     | expr • DEC

    AND  error (nonassociative)

    $default  reduce using rule 103 (expr)


State 115

   91 expr: expr • PLUS expr
   92     | expr • MINUS expr
   93     | expr • MULT expr
   94     | expr • DIV expr
   95     | expr • POWER expr
   96     | expr • MODULE expr
   97     | expr • EQU_EQU expr
   98     | expr • NOT_EQU expr
   99     | expr • MORE_OR_EQU expr
  100     | expr • LESS_OR_EQU expr
  101     | expr • MORE expr
  102     | expr • LESS expr
  103     | expr • AND expr
  104     | expr • OR expr
  104     | expr OR expr •
  105     | expr • INC
  106     | expr • DEC

    AND  shift, and go to state 78

    OR  error (nonassociative)

    $default  reduce using rule 104 (expr)


State 116

   72 parameters: type • IDENTIFIER
   73           | type • IDENTIFIER ',' parameters

    IDENTIFIER  shift, and go to state 138


State 117

   43 func_proto: TYPE_VOID IDENTIFIER '(' parameters • ')' ';'
   45 func_define: TYPE_VOID IDENTIFIER '(' parameters • ')' '{' stmt_list '}'

    ')'  shift, and go to state 139


State 118

   22 genn_stmt: CONSTANT type IDENTIFIER EQU • rvalue ';'

    INTEGER  shift, and go to state 1
    FLOAT    shift, and go to state 2
    BOOL     shift, and go to state 3
    CHAR     shift, and go to state 4
    STRING   shift, and go to state 5

    rvalue  go to state 140


State 119

   63 enum_define: ENUM IDENTIFIER IDENTIFIER EQU • IDENTIFIER ';'

    IDENTIFIER  shift, and go to state 141


State 120

   80 enum_list: IDENTIFIER •
   81          | IDENTIFIER • EQU INTEGER
   82          | IDENTIFIER • EQU INTEGER ',' enum_list
   83          | IDENTIFIER • ',' enum_list

    EQU  shift, and go to state 142
    ','  shift, and go to state 143

    $default  reduce using rule 80 (enum_list)


State 121

   62 enum_declare: ENUM IDENTIFIER '{' enum_list • '}' ';'

    '}'  shift, and go to state 144


State 122

   64 while_proto: WHILE '(' expr ')' • ';'
   65 while_define: WHILE '(' expr ')' • '{' stmt_list '}'
   66             | WHILE '(' expr ')' • '{' break_stmt_list '}'

    ';'  shift, and go to state 145
    '{'  shift, and go to state 146


State 123

   47 for_proto: FOR '(' IDENTIFIER EQU • expr ';' expr ';' expr ')' ';'
   49 for_define: FOR '(' IDENTIFIER EQU • expr ';' expr ';' expr ')' '{' stmt_list '}'
   50           | FOR '(' IDENTIFIER EQU • expr ';' expr ';' expr ')' '{' break_stmt_list '}'

    INTEGER     shift, and go to state 1
    FLOAT       shift, and go to state 2
    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    STRING      shift, and go to state 5
    NOT         shift, and go to state 19
    IDENTIFIER  shift, and go to state 56

    rvalue  go to state 46
    expr    go to state 147


State 124

   48 for_proto: FOR '(' expr ';' • expr ';' expr ')' ';'
   51 for_define: FOR '(' expr ';' • expr ';' expr ')' '{' stmt_list '}'
   52           | FOR '(' expr ';' • expr ';' expr ')' '{' break_stmt_list '}'

    INTEGER     shift, and go to state 1
    FLOAT       shift, and go to state 2
    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    STRING      shift, and go to state 5
    NOT         shift, and go to state 19
    IDENTIFIER  shift, and go to state 56

    rvalue  go to state 46
    expr    go to state 148


State 125

   53 if_proto: IF '(' expr ')' • ';'
   54 if_define: IF '(' expr ')' • '{' stmt_list '}'
   55          | IF '(' expr ')' • '{' stmt_list '}' ELSE '{' stmt_list '}'
   56          | IF '(' expr ')' • '{' stmt_list '}' ELSE '{' '}'
   57          | IF '(' expr ')' • '{' stmt_list '}' ELSE ';'
   58          | IF '(' expr ')' • '{' '}'
   59          | IF '(' expr ')' • '{' '}' ELSE '{' stmt_list '}'
   60          | IF '(' expr ')' • '{' '}' ELSE '{' '}'
   61          | IF '(' expr ')' • '{' '}' ELSE ';'

    ';'  shift, and go to state 149
    '{'  shift, and go to state 150


State 126

   40 switch_stmt: SWITCH '(' IDENTIFIER ')' • '{' case_list case_default '}' ';'
   41            | SWITCH '(' IDENTIFIER ')' • '{' case_default '}' ';'

    '{'  shift, and go to state 151


State 127

   29 print_stmt: PRINT '(' expr ')' • ';'

    ';'  shift, and go to state 152


State 128

   39 repeat_stmt: REPEAT '{' '}' UNTIL • '(' expr ')' ';'

    '('  shift, and go to state 153


State 129

   38 repeat_stmt: REPEAT '{' stmt_list '}' • UNTIL '(' expr ')' ';'

    UNTIL  shift, and go to state 154


State 130

   14 stmt_list: stmt_list stmt •

    $default  reduce using rule 14 (stmt_list)


State 131

   21 genn_stmt: IDENTIFIER EQU func_call ';' •

    $default  reduce using rule 21 (genn_stmt)


State 132

   23 genn_stmt: IDENTIFIER EQU expr ';' •

    $default  reduce using rule 23 (genn_stmt)


State 133

   46 func_call: IDENTIFIER '(' expr_list ')' •

    $default  reduce using rule 46 (func_call)


State 134

   88 expr_list: expr_list ',' • expr

    INTEGER     shift, and go to state 1
    FLOAT       shift, and go to state 2
    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    STRING      shift, and go to state 5
    NOT         shift, and go to state 19
    IDENTIFIER  shift, and go to state 56

    rvalue  go to state 46
    expr    go to state 155


State 135

   20 genn_stmt: type IDENTIFIER EQU func_call • ';'

    ';'  shift, and go to state 156


State 136

   24 genn_stmt: type IDENTIFIER EQU expr • ';'
   91 expr: expr • PLUS expr
   92     | expr • MINUS expr
   93     | expr • MULT expr
   94     | expr • DIV expr
   95     | expr • POWER expr
   96     | expr • MODULE expr
   97     | expr • EQU_EQU expr
   98     | expr • NOT_EQU expr
   99     | expr • MORE_OR_EQU expr
  100     | expr • LESS_OR_EQU expr
  101     | expr • MORE expr
  102     | expr • LESS expr
  103     | expr • AND expr
  104     | expr • OR expr
  105     | expr • INC
  106     | expr • DEC

    MINUS        shift, and go to state 64
    MULT         shift, and go to state 65
    PLUS         shift, and go to state 66
    DIV          shift, and go to state 67
    MODULE       shift, and go to state 68
    POWER        shift, and go to state 69
    INC          shift, and go to state 70
    DEC          shift, and go to state 71
    MORE         shift, and go to state 72
    LESS         shift, and go to state 73
    EQU_EQU      shift, and go to state 74
    MORE_OR_EQU  shift, and go to state 75
    LESS_OR_EQU  shift, and go to state 76
    NOT_EQU      shift, and go to state 77
    AND          shift, and go to state 78
    OR           shift, and go to state 79
    ';'          shift, and go to state 157


State 137

   42 func_proto: type IDENTIFIER '(' parameters • ')' ';'
   44 func_define: type IDENTIFIER '(' parameters • ')' '{' func_stmt_list '}'

    ')'  shift, and go to state 158


State 138

   72 parameters: type IDENTIFIER •
   73           | type IDENTIFIER • ',' parameters

    ','  shift, and go to state 159

    $default  reduce using rule 72 (parameters)


State 139

   43 func_proto: TYPE_VOID IDENTIFIER '(' parameters ')' • ';'
   45 func_define: TYPE_VOID IDENTIFIER '(' parameters ')' • '{' stmt_list '}'

    ';'  shift, and go to state 160
    '{'  shift, and go to state 161


State 140

   22 genn_stmt: CONSTANT type IDENTIFIER EQU rvalue • ';'

    ';'  shift, and go to state 162


State 141

   63 enum_define: ENUM IDENTIFIER IDENTIFIER EQU IDENTIFIER • ';'

    ';'  shift, and go to state 163


State 142

   81 enum_list: IDENTIFIER EQU • INTEGER
   82          | IDENTIFIER EQU • INTEGER ',' enum_list

    INTEGER  shift, and go to state 164


State 143

   83 enum_list: IDENTIFIER ',' • enum_list

    IDENTIFIER  shift, and go to state 120

    enum_list  go to state 165


State 144

   62 enum_declare: ENUM IDENTIFIER '{' enum_list '}' • ';'

    ';'  shift, and go to state 166


State 145

   64 while_proto: WHILE '(' expr ')' ';' •

    $default  reduce using rule 64 (while_proto)


State 146

   65 while_define: WHILE '(' expr ')' '{' • stmt_list '}'
   66             | WHILE '(' expr ')' '{' • break_stmt_list '}'

    INTEGER      shift, and go to state 1
    FLOAT        shift, and go to state 2
    BOOL         shift, and go to state 3
    CHAR         shift, and go to state 4
    STRING       shift, and go to state 5
    TYPE_INT     shift, and go to state 6
    TYPE_FLOAT   shift, and go to state 7
    TYPE_CHAR    shift, and go to state 8
    TYPE_BOOL    shift, and go to state 9
    TYPE_STRING  shift, and go to state 10
    TYPE_VOID    shift, and go to state 11
    CONSTANT     shift, and go to state 12
    ENUM         shift, and go to state 13
    WHILE        shift, and go to state 14
    FOR          shift, and go to state 15
    BREAK        shift, and go to state 167
    IF           shift, and go to state 16
    SWITCH       shift, and go to state 17
    PRINT        shift, and go to state 18
    NOT          shift, and go to state 19
    REPEAT       shift, and go to state 20
    IDENTIFIER   shift, and go to state 21
    COMMENT      shift, and go to state 22

    stmt             go to state 92
    stmt_list        go to state 168
    break_stmt_list  go to state 169
    genn_stmt        go to state 25
    func_stmt        go to state 26
    print_stmt       go to state 27
    for_stmt         go to state 28
    if_stmt          go to state 29
    enum_stmt        go to state 30
    while_stmt       go to state 31
    repeat_stmt      go to state 32
    switch_stmt      go to state 33
    func_proto       go to state 34
    func_define      go to state 35
    func_call        go to state 36
    for_proto        go to state 37
    for_define       go to state 38
    if_proto         go to state 39
    if_define        go to state 40
    enum_declare     go to state 41
    enum_define      go to state 42
    while_proto      go to state 43
    while_define     go to state 44
    type             go to state 45
    rvalue           go to state 46
    expr             go to state 47


State 147

   47 for_proto: FOR '(' IDENTIFIER EQU expr • ';' expr ';' expr ')' ';'
   49 for_define: FOR '(' IDENTIFIER EQU expr • ';' expr ';' expr ')' '{' stmt_list '}'
   50           | FOR '(' IDENTIFIER EQU expr • ';' expr ';' expr ')' '{' break_stmt_list '}'
   91 expr: expr • PLUS expr
   92     | expr • MINUS expr
   93     | expr • MULT expr
   94     | expr • DIV expr
   95     | expr • POWER expr
   96     | expr • MODULE expr
   97     | expr • EQU_EQU expr
   98     | expr • NOT_EQU expr
   99     | expr • MORE_OR_EQU expr
  100     | expr • LESS_OR_EQU expr
  101     | expr • MORE expr
  102     | expr • LESS expr
  103     | expr • AND expr
  104     | expr • OR expr
  105     | expr • INC
  106     | expr • DEC

    MINUS        shift, and go to state 64
    MULT         shift, and go to state 65
    PLUS         shift, and go to state 66
    DIV          shift, and go to state 67
    MODULE       shift, and go to state 68
    POWER        shift, and go to state 69
    INC          shift, and go to state 70
    DEC          shift, and go to state 71
    MORE         shift, and go to state 72
    LESS         shift, and go to state 73
    EQU_EQU      shift, and go to state 74
    MORE_OR_EQU  shift, and go to state 75
    LESS_OR_EQU  shift, and go to state 76
    NOT_EQU      shift, and go to state 77
    AND          shift, and go to state 78
    OR           shift, and go to state 79
    ';'          shift, and go to state 170


State 148

   48 for_proto: FOR '(' expr ';' expr • ';' expr ')' ';'
   51 for_define: FOR '(' expr ';' expr • ';' expr ')' '{' stmt_list '}'
   52           | FOR '(' expr ';' expr • ';' expr ')' '{' break_stmt_list '}'
   91 expr: expr • PLUS expr
   92     | expr • MINUS expr
   93     | expr • MULT expr
   94     | expr • DIV expr
   95     | expr • POWER expr
   96     | expr • MODULE expr
   97     | expr • EQU_EQU expr
   98     | expr • NOT_EQU expr
   99     | expr • MORE_OR_EQU expr
  100     | expr • LESS_OR_EQU expr
  101     | expr • MORE expr
  102     | expr • LESS expr
  103     | expr • AND expr
  104     | expr • OR expr
  105     | expr • INC
  106     | expr • DEC

    MINUS        shift, and go to state 64
    MULT         shift, and go to state 65
    PLUS         shift, and go to state 66
    DIV          shift, and go to state 67
    MODULE       shift, and go to state 68
    POWER        shift, and go to state 69
    INC          shift, and go to state 70
    DEC          shift, and go to state 71
    MORE         shift, and go to state 72
    LESS         shift, and go to state 73
    EQU_EQU      shift, and go to state 74
    MORE_OR_EQU  shift, and go to state 75
    LESS_OR_EQU  shift, and go to state 76
    NOT_EQU      shift, and go to state 77
    AND          shift, and go to state 78
    OR           shift, and go to state 79
    ';'          shift, and go to state 171


State 149

   53 if_proto: IF '(' expr ')' ';' •

    $default  reduce using rule 53 (if_proto)


State 150

   54 if_define: IF '(' expr ')' '{' • stmt_list '}'
   55          | IF '(' expr ')' '{' • stmt_list '}' ELSE '{' stmt_list '}'
   56          | IF '(' expr ')' '{' • stmt_list '}' ELSE '{' '}'
   57          | IF '(' expr ')' '{' • stmt_list '}' ELSE ';'
   58          | IF '(' expr ')' '{' • '}'
   59          | IF '(' expr ')' '{' • '}' ELSE '{' stmt_list '}'
   60          | IF '(' expr ')' '{' • '}' ELSE '{' '}'
   61          | IF '(' expr ')' '{' • '}' ELSE ';'

    INTEGER      shift, and go to state 1
    FLOAT        shift, and go to state 2
    BOOL         shift, and go to state 3
    CHAR         shift, and go to state 4
    STRING       shift, and go to state 5
    TYPE_INT     shift, and go to state 6
    TYPE_FLOAT   shift, and go to state 7
    TYPE_CHAR    shift, and go to state 8
    TYPE_BOOL    shift, and go to state 9
    TYPE_STRING  shift, and go to state 10
    TYPE_VOID    shift, and go to state 11
    CONSTANT     shift, and go to state 12
    ENUM         shift, and go to state 13
    WHILE        shift, and go to state 14
    FOR          shift, and go to state 15
    IF           shift, and go to state 16
    SWITCH       shift, and go to state 17
    PRINT        shift, and go to state 18
    NOT          shift, and go to state 19
    REPEAT       shift, and go to state 20
    IDENTIFIER   shift, and go to state 21
    COMMENT      shift, and go to state 22
    '}'          shift, and go to state 172

    stmt          go to state 92
    stmt_list     go to state 173
    genn_stmt     go to state 25
    func_stmt     go to state 26
    print_stmt    go to state 27
    for_stmt      go to state 28
    if_stmt       go to state 29
    enum_stmt     go to state 30
    while_stmt    go to state 31
    repeat_stmt   go to state 32
    switch_stmt   go to state 33
    func_proto    go to state 34
    func_define   go to state 35
    func_call     go to state 36
    for_proto     go to state 37
    for_define    go to state 38
    if_proto      go to state 39
    if_define     go to state 40
    enum_declare  go to state 41
    enum_define   go to state 42
    while_proto   go to state 43
    while_define  go to state 44
    type          go to state 45
    rvalue        go to state 46
    expr          go to state 47


State 151

   40 switch_stmt: SWITCH '(' IDENTIFIER ')' '{' • case_list case_default '}' ';'
   41            | SWITCH '(' IDENTIFIER ')' '{' • case_default '}' ';'

    CASE     shift, and go to state 174
    DEFAULT  shift, and go to state 175

    case_list     go to state 176
    case_default  go to state 177


State 152

   29 print_stmt: PRINT '(' expr ')' ';' •

    $default  reduce using rule 29 (print_stmt)


State 153

   39 repeat_stmt: REPEAT '{' '}' UNTIL '(' • expr ')' ';'

    INTEGER     shift, and go to state 1
    FLOAT       shift, and go to state 2
    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    STRING      shift, and go to state 5
    NOT         shift, and go to state 19
    IDENTIFIER  shift, and go to state 56

    rvalue  go to state 46
    expr    go to state 178


State 154

   38 repeat_stmt: REPEAT '{' stmt_list '}' UNTIL • '(' expr ')' ';'

    '('  shift, and go to state 179


State 155

   88 expr_list: expr_list ',' expr •
   91 expr: expr • PLUS expr
   92     | expr • MINUS expr
   93     | expr • MULT expr
   94     | expr • DIV expr
   95     | expr • POWER expr
   96     | expr • MODULE expr
   97     | expr • EQU_EQU expr
   98     | expr • NOT_EQU expr
   99     | expr • MORE_OR_EQU expr
  100     | expr • LESS_OR_EQU expr
  101     | expr • MORE expr
  102     | expr • LESS expr
  103     | expr • AND expr
  104     | expr • OR expr
  105     | expr • INC
  106     | expr • DEC

    MINUS        shift, and go to state 64
    MULT         shift, and go to state 65
    PLUS         shift, and go to state 66
    DIV          shift, and go to state 67
    MODULE       shift, and go to state 68
    POWER        shift, and go to state 69
    INC          shift, and go to state 70
    DEC          shift, and go to state 71
    MORE         shift, and go to state 72
    LESS         shift, and go to state 73
    EQU_EQU      shift, and go to state 74
    MORE_OR_EQU  shift, and go to state 75
    LESS_OR_EQU  shift, and go to state 76
    NOT_EQU      shift, and go to state 77
    AND          shift, and go to state 78
    OR           shift, and go to state 79

    $default  reduce using rule 88 (expr_list)


State 156

   20 genn_stmt: type IDENTIFIER EQU func_call ';' •

    $default  reduce using rule 20 (genn_stmt)


State 157

   24 genn_stmt: type IDENTIFIER EQU expr ';' •

    $default  reduce using rule 24 (genn_stmt)


State 158

   42 func_proto: type IDENTIFIER '(' parameters ')' • ';'
   44 func_define: type IDENTIFIER '(' parameters ')' • '{' func_stmt_list '}'

    ';'  shift, and go to state 180
    '{'  shift, and go to state 181


State 159

   73 parameters: type IDENTIFIER ',' • parameters

    TYPE_INT     shift, and go to state 6
    TYPE_FLOAT   shift, and go to state 7
    TYPE_CHAR    shift, and go to state 8
    TYPE_BOOL    shift, and go to state 9
    TYPE_STRING  shift, and go to state 10

    $default  reduce using rule 74 (parameters)

    type        go to state 116
    parameters  go to state 182


State 160

   43 func_proto: TYPE_VOID IDENTIFIER '(' parameters ')' ';' •

    $default  reduce using rule 43 (func_proto)


State 161

   45 func_define: TYPE_VOID IDENTIFIER '(' parameters ')' '{' • stmt_list '}'

    INTEGER      shift, and go to state 1
    FLOAT        shift, and go to state 2
    BOOL         shift, and go to state 3
    CHAR         shift, and go to state 4
    STRING       shift, and go to state 5
    TYPE_INT     shift, and go to state 6
    TYPE_FLOAT   shift, and go to state 7
    TYPE_CHAR    shift, and go to state 8
    TYPE_BOOL    shift, and go to state 9
    TYPE_STRING  shift, and go to state 10
    TYPE_VOID    shift, and go to state 11
    CONSTANT     shift, and go to state 12
    ENUM         shift, and go to state 13
    WHILE        shift, and go to state 14
    FOR          shift, and go to state 15
    IF           shift, and go to state 16
    SWITCH       shift, and go to state 17
    PRINT        shift, and go to state 18
    NOT          shift, and go to state 19
    REPEAT       shift, and go to state 20
    IDENTIFIER   shift, and go to state 21
    COMMENT      shift, and go to state 22

    stmt          go to state 92
    stmt_list     go to state 183
    genn_stmt     go to state 25
    func_stmt     go to state 26
    print_stmt    go to state 27
    for_stmt      go to state 28
    if_stmt       go to state 29
    enum_stmt     go to state 30
    while_stmt    go to state 31
    repeat_stmt   go to state 32
    switch_stmt   go to state 33
    func_proto    go to state 34
    func_define   go to state 35
    func_call     go to state 36
    for_proto     go to state 37
    for_define    go to state 38
    if_proto      go to state 39
    if_define     go to state 40
    enum_declare  go to state 41
    enum_define   go to state 42
    while_proto   go to state 43
    while_define  go to state 44
    type          go to state 45
    rvalue        go to state 46
    expr          go to state 47


State 162

   22 genn_stmt: CONSTANT type IDENTIFIER EQU rvalue ';' •

    $default  reduce using rule 22 (genn_stmt)


State 163

   63 enum_define: ENUM IDENTIFIER IDENTIFIER EQU IDENTIFIER ';' •

    $default  reduce using rule 63 (enum_define)


State 164

   81 enum_list: IDENTIFIER EQU INTEGER •
   82          | IDENTIFIER EQU INTEGER • ',' enum_list

    ','  shift, and go to state 184

    $default  reduce using rule 81 (enum_list)


State 165

   83 enum_list: IDENTIFIER ',' enum_list •

    $default  reduce using rule 83 (enum_list)


State 166

   62 enum_declare: ENUM IDENTIFIER '{' enum_list '}' ';' •

    $default  reduce using rule 62 (enum_declare)


State 167

   18 break_stmt_list: BREAK • ';'

    ';'  shift, and go to state 185


State 168

   14 stmt_list: stmt_list • stmt
   17 break_stmt_list: stmt_list • BREAK ';'
   65 while_define: WHILE '(' expr ')' '{' stmt_list • '}'

    INTEGER      shift, and go to state 1
    FLOAT        shift, and go to state 2
    BOOL         shift, and go to state 3
    CHAR         shift, and go to state 4
    STRING       shift, and go to state 5
    TYPE_INT     shift, and go to state 6
    TYPE_FLOAT   shift, and go to state 7
    TYPE_CHAR    shift, and go to state 8
    TYPE_BOOL    shift, and go to state 9
    TYPE_STRING  shift, and go to state 10
    TYPE_VOID    shift, and go to state 11
    CONSTANT     shift, and go to state 12
    ENUM         shift, and go to state 13
    WHILE        shift, and go to state 14
    FOR          shift, and go to state 15
    BREAK        shift, and go to state 186
    IF           shift, and go to state 16
    SWITCH       shift, and go to state 17
    PRINT        shift, and go to state 18
    NOT          shift, and go to state 19
    REPEAT       shift, and go to state 20
    IDENTIFIER   shift, and go to state 21
    COMMENT      shift, and go to state 22
    '}'          shift, and go to state 187

    stmt          go to state 130
    genn_stmt     go to state 25
    func_stmt     go to state 26
    print_stmt    go to state 27
    for_stmt      go to state 28
    if_stmt       go to state 29
    enum_stmt     go to state 30
    while_stmt    go to state 31
    repeat_stmt   go to state 32
    switch_stmt   go to state 33
    func_proto    go to state 34
    func_define   go to state 35
    func_call     go to state 36
    for_proto     go to state 37
    for_define    go to state 38
    if_proto      go to state 39
    if_define     go to state 40
    enum_declare  go to state 41
    enum_define   go to state 42
    while_proto   go to state 43
    while_define  go to state 44
    type          go to state 45
    rvalue        go to state 46
    expr          go to state 47


State 169

   66 while_define: WHILE '(' expr ')' '{' break_stmt_list • '}'

    '}'  shift, and go to state 188


State 170

   47 for_proto: FOR '(' IDENTIFIER EQU expr ';' • expr ';' expr ')' ';'
   49 for_define: FOR '(' IDENTIFIER EQU expr ';' • expr ';' expr ')' '{' stmt_list '}'
   50           | FOR '(' IDENTIFIER EQU expr ';' • expr ';' expr ')' '{' break_stmt_list '}'

    INTEGER     shift, and go to state 1
    FLOAT       shift, and go to state 2
    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    STRING      shift, and go to state 5
    NOT         shift, and go to state 19
    IDENTIFIER  shift, and go to state 56

    rvalue  go to state 46
    expr    go to state 189


State 171

   48 for_proto: FOR '(' expr ';' expr ';' • expr ')' ';'
   51 for_define: FOR '(' expr ';' expr ';' • expr ')' '{' stmt_list '}'
   52           | FOR '(' expr ';' expr ';' • expr ')' '{' break_stmt_list '}'

    INTEGER     shift, and go to state 1
    FLOAT       shift, and go to state 2
    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    STRING      shift, and go to state 5
    NOT         shift, and go to state 19
    IDENTIFIER  shift, and go to state 56

    rvalue  go to state 46
    expr    go to state 190


State 172

   58 if_define: IF '(' expr ')' '{' '}' •
   59          | IF '(' expr ')' '{' '}' • ELSE '{' stmt_list '}'
   60          | IF '(' expr ')' '{' '}' • ELSE '{' '}'
   61          | IF '(' expr ')' '{' '}' • ELSE ';'

    ELSE  shift, and go to state 191

    $default  reduce using rule 58 (if_define)


State 173

   14 stmt_list: stmt_list • stmt
   54 if_define: IF '(' expr ')' '{' stmt_list • '}'
   55          | IF '(' expr ')' '{' stmt_list • '}' ELSE '{' stmt_list '}'
   56          | IF '(' expr ')' '{' stmt_list • '}' ELSE '{' '}'
   57          | IF '(' expr ')' '{' stmt_list • '}' ELSE ';'

    INTEGER      shift, and go to state 1
    FLOAT        shift, and go to state 2
    BOOL         shift, and go to state 3
    CHAR         shift, and go to state 4
    STRING       shift, and go to state 5
    TYPE_INT     shift, and go to state 6
    TYPE_FLOAT   shift, and go to state 7
    TYPE_CHAR    shift, and go to state 8
    TYPE_BOOL    shift, and go to state 9
    TYPE_STRING  shift, and go to state 10
    TYPE_VOID    shift, and go to state 11
    CONSTANT     shift, and go to state 12
    ENUM         shift, and go to state 13
    WHILE        shift, and go to state 14
    FOR          shift, and go to state 15
    IF           shift, and go to state 16
    SWITCH       shift, and go to state 17
    PRINT        shift, and go to state 18
    NOT          shift, and go to state 19
    REPEAT       shift, and go to state 20
    IDENTIFIER   shift, and go to state 21
    COMMENT      shift, and go to state 22
    '}'          shift, and go to state 192

    stmt          go to state 130
    genn_stmt     go to state 25
    func_stmt     go to state 26
    print_stmt    go to state 27
    for_stmt      go to state 28
    if_stmt       go to state 29
    enum_stmt     go to state 30
    while_stmt    go to state 31
    repeat_stmt   go to state 32
    switch_stmt   go to state 33
    func_proto    go to state 34
    func_define   go to state 35
    func_call     go to state 36
    for_proto     go to state 37
    for_define    go to state 38
    if_proto      go to state 39
    if_define     go to state 40
    enum_declare  go to state 41
    enum_define   go to state 42
    while_proto   go to state 43
    while_define  go to state 44
    type          go to state 45
    rvalue        go to state 46
    expr          go to state 47


State 174

   85 case_list: CASE • rvalue ':' break_stmt_list

    INTEGER  shift, and go to state 1
    FLOAT    shift, and go to state 2
    BOOL     shift, and go to state 3
    CHAR     shift, and go to state 4
    STRING   shift, and go to state 5

    rvalue  go to state 193


State 175

   86 case_default: DEFAULT • ':' break_stmt_list

    ':'  shift, and go to state 194


State 176

   40 switch_stmt: SWITCH '(' IDENTIFIER ')' '{' case_list • case_default '}' ';'
   84 case_list: case_list • CASE rvalue ':' break_stmt_list

    CASE     shift, and go to state 195
    DEFAULT  shift, and go to state 175

    case_default  go to state 196


State 177

   41 switch_stmt: SWITCH '(' IDENTIFIER ')' '{' case_default • '}' ';'

    '}'  shift, and go to state 197


State 178

   39 repeat_stmt: REPEAT '{' '}' UNTIL '(' expr • ')' ';'
   91 expr: expr • PLUS expr
   92     | expr • MINUS expr
   93     | expr • MULT expr
   94     | expr • DIV expr
   95     | expr • POWER expr
   96     | expr • MODULE expr
   97     | expr • EQU_EQU expr
   98     | expr • NOT_EQU expr
   99     | expr • MORE_OR_EQU expr
  100     | expr • LESS_OR_EQU expr
  101     | expr • MORE expr
  102     | expr • LESS expr
  103     | expr • AND expr
  104     | expr • OR expr
  105     | expr • INC
  106     | expr • DEC

    MINUS        shift, and go to state 64
    MULT         shift, and go to state 65
    PLUS         shift, and go to state 66
    DIV          shift, and go to state 67
    MODULE       shift, and go to state 68
    POWER        shift, and go to state 69
    INC          shift, and go to state 70
    DEC          shift, and go to state 71
    MORE         shift, and go to state 72
    LESS         shift, and go to state 73
    EQU_EQU      shift, and go to state 74
    MORE_OR_EQU  shift, and go to state 75
    LESS_OR_EQU  shift, and go to state 76
    NOT_EQU      shift, and go to state 77
    AND          shift, and go to state 78
    OR           shift, and go to state 79
    ')'          shift, and go to state 198


State 179

   38 repeat_stmt: REPEAT '{' stmt_list '}' UNTIL '(' • expr ')' ';'

    INTEGER     shift, and go to state 1
    FLOAT       shift, and go to state 2
    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    STRING      shift, and go to state 5
    NOT         shift, and go to state 19
    IDENTIFIER  shift, and go to state 56

    rvalue  go to state 46
    expr    go to state 199


State 180

   42 func_proto: type IDENTIFIER '(' parameters ')' ';' •

    $default  reduce using rule 42 (func_proto)


State 181

   44 func_define: type IDENTIFIER '(' parameters ')' '{' • func_stmt_list '}'

    INTEGER      shift, and go to state 1
    FLOAT        shift, and go to state 2
    BOOL         shift, and go to state 3
    CHAR         shift, and go to state 4
    STRING       shift, and go to state 5
    TYPE_INT     shift, and go to state 6
    TYPE_FLOAT   shift, and go to state 7
    TYPE_CHAR    shift, and go to state 8
    TYPE_BOOL    shift, and go to state 9
    TYPE_STRING  shift, and go to state 10
    TYPE_VOID    shift, and go to state 11
    CONSTANT     shift, and go to state 12
    ENUM         shift, and go to state 13
    WHILE        shift, and go to state 14
    FOR          shift, and go to state 15
    IF           shift, and go to state 16
    RETURN       shift, and go to state 200
    SWITCH       shift, and go to state 17
    PRINT        shift, and go to state 18
    NOT          shift, and go to state 19
    REPEAT       shift, and go to state 20
    IDENTIFIER   shift, and go to state 21
    COMMENT      shift, and go to state 22

    stmt            go to state 92
    stmt_list       go to state 201
    func_stmt_list  go to state 202
    genn_stmt       go to state 25
    func_stmt       go to state 26
    print_stmt      go to state 27
    for_stmt        go to state 28
    if_stmt         go to state 29
    enum_stmt       go to state 30
    while_stmt      go to state 31
    repeat_stmt     go to state 32
    switch_stmt     go to state 33
    func_proto      go to state 34
    func_define     go to state 35
    func_call       go to state 36
    for_proto       go to state 37
    for_define      go to state 38
    if_proto        go to state 39
    if_define       go to state 40
    enum_declare    go to state 41
    enum_define     go to state 42
    while_proto     go to state 43
    while_define    go to state 44
    type            go to state 45
    rvalue          go to state 46
    expr            go to state 47


State 182

   73 parameters: type IDENTIFIER ',' parameters •

    $default  reduce using rule 73 (parameters)


State 183

   14 stmt_list: stmt_list • stmt
   45 func_define: TYPE_VOID IDENTIFIER '(' parameters ')' '{' stmt_list • '}'

    INTEGER      shift, and go to state 1
    FLOAT        shift, and go to state 2
    BOOL         shift, and go to state 3
    CHAR         shift, and go to state 4
    STRING       shift, and go to state 5
    TYPE_INT     shift, and go to state 6
    TYPE_FLOAT   shift, and go to state 7
    TYPE_CHAR    shift, and go to state 8
    TYPE_BOOL    shift, and go to state 9
    TYPE_STRING  shift, and go to state 10
    TYPE_VOID    shift, and go to state 11
    CONSTANT     shift, and go to state 12
    ENUM         shift, and go to state 13
    WHILE        shift, and go to state 14
    FOR          shift, and go to state 15
    IF           shift, and go to state 16
    SWITCH       shift, and go to state 17
    PRINT        shift, and go to state 18
    NOT          shift, and go to state 19
    REPEAT       shift, and go to state 20
    IDENTIFIER   shift, and go to state 21
    COMMENT      shift, and go to state 22
    '}'          shift, and go to state 203

    stmt          go to state 130
    genn_stmt     go to state 25
    func_stmt     go to state 26
    print_stmt    go to state 27
    for_stmt      go to state 28
    if_stmt       go to state 29
    enum_stmt     go to state 30
    while_stmt    go to state 31
    repeat_stmt   go to state 32
    switch_stmt   go to state 33
    func_proto    go to state 34
    func_define   go to state 35
    func_call     go to state 36
    for_proto     go to state 37
    for_define    go to state 38
    if_proto      go to state 39
    if_define     go to state 40
    enum_declare  go to state 41
    enum_define   go to state 42
    while_proto   go to state 43
    while_define  go to state 44
    type          go to state 45
    rvalue        go to state 46
    expr          go to state 47


State 184

   82 enum_list: IDENTIFIER EQU INTEGER ',' • enum_list

    IDENTIFIER  shift, and go to state 120

    enum_list  go to state 204


State 185

   18 break_stmt_list: BREAK ';' •

    $default  reduce using rule 18 (break_stmt_list)


State 186

   17 break_stmt_list: stmt_list BREAK • ';'

    ';'  shift, and go to state 205


State 187

   65 while_define: WHILE '(' expr ')' '{' stmt_list '}' •

    $default  reduce using rule 65 (while_define)


State 188

   66 while_define: WHILE '(' expr ')' '{' break_stmt_list '}' •

    $default  reduce using rule 66 (while_define)


State 189

   47 for_proto: FOR '(' IDENTIFIER EQU expr ';' expr • ';' expr ')' ';'
   49 for_define: FOR '(' IDENTIFIER EQU expr ';' expr • ';' expr ')' '{' stmt_list '}'
   50           | FOR '(' IDENTIFIER EQU expr ';' expr • ';' expr ')' '{' break_stmt_list '}'
   91 expr: expr • PLUS expr
   92     | expr • MINUS expr
   93     | expr • MULT expr
   94     | expr • DIV expr
   95     | expr • POWER expr
   96     | expr • MODULE expr
   97     | expr • EQU_EQU expr
   98     | expr • NOT_EQU expr
   99     | expr • MORE_OR_EQU expr
  100     | expr • LESS_OR_EQU expr
  101     | expr • MORE expr
  102     | expr • LESS expr
  103     | expr • AND expr
  104     | expr • OR expr
  105     | expr • INC
  106     | expr • DEC

    MINUS        shift, and go to state 64
    MULT         shift, and go to state 65
    PLUS         shift, and go to state 66
    DIV          shift, and go to state 67
    MODULE       shift, and go to state 68
    POWER        shift, and go to state 69
    INC          shift, and go to state 70
    DEC          shift, and go to state 71
    MORE         shift, and go to state 72
    LESS         shift, and go to state 73
    EQU_EQU      shift, and go to state 74
    MORE_OR_EQU  shift, and go to state 75
    LESS_OR_EQU  shift, and go to state 76
    NOT_EQU      shift, and go to state 77
    AND          shift, and go to state 78
    OR           shift, and go to state 79
    ';'          shift, and go to state 206


State 190

   48 for_proto: FOR '(' expr ';' expr ';' expr • ')' ';'
   51 for_define: FOR '(' expr ';' expr ';' expr • ')' '{' stmt_list '}'
   52           | FOR '(' expr ';' expr ';' expr • ')' '{' break_stmt_list '}'
   91 expr: expr • PLUS expr
   92     | expr • MINUS expr
   93     | expr • MULT expr
   94     | expr • DIV expr
   95     | expr • POWER expr
   96     | expr • MODULE expr
   97     | expr • EQU_EQU expr
   98     | expr • NOT_EQU expr
   99     | expr • MORE_OR_EQU expr
  100     | expr • LESS_OR_EQU expr
  101     | expr • MORE expr
  102     | expr • LESS expr
  103     | expr • AND expr
  104     | expr • OR expr
  105     | expr • INC
  106     | expr • DEC

    MINUS        shift, and go to state 64
    MULT         shift, and go to state 65
    PLUS         shift, and go to state 66
    DIV          shift, and go to state 67
    MODULE       shift, and go to state 68
    POWER        shift, and go to state 69
    INC          shift, and go to state 70
    DEC          shift, and go to state 71
    MORE         shift, and go to state 72
    LESS         shift, and go to state 73
    EQU_EQU      shift, and go to state 74
    MORE_OR_EQU  shift, and go to state 75
    LESS_OR_EQU  shift, and go to state 76
    NOT_EQU      shift, and go to state 77
    AND          shift, and go to state 78
    OR           shift, and go to state 79
    ')'          shift, and go to state 207


State 191

   59 if_define: IF '(' expr ')' '{' '}' ELSE • '{' stmt_list '}'
   60          | IF '(' expr ')' '{' '}' ELSE • '{' '}'
   61          | IF '(' expr ')' '{' '}' ELSE • ';'

    ';'  shift, and go to state 208
    '{'  shift, and go to state 209


State 192

   54 if_define: IF '(' expr ')' '{' stmt_list '}' •
   55          | IF '(' expr ')' '{' stmt_list '}' • ELSE '{' stmt_list '}'
   56          | IF '(' expr ')' '{' stmt_list '}' • ELSE '{' '}'
   57          | IF '(' expr ')' '{' stmt_list '}' • ELSE ';'

    ELSE  shift, and go to state 210

    $default  reduce using rule 54 (if_define)


State 193

   85 case_list: CASE rvalue • ':' break_stmt_list

    ':'  shift, and go to state 211


State 194

   86 case_default: DEFAULT ':' • break_stmt_list

    INTEGER      shift, and go to state 1
    FLOAT        shift, and go to state 2
    BOOL         shift, and go to state 3
    CHAR         shift, and go to state 4
    STRING       shift, and go to state 5
    TYPE_INT     shift, and go to state 6
    TYPE_FLOAT   shift, and go to state 7
    TYPE_CHAR    shift, and go to state 8
    TYPE_BOOL    shift, and go to state 9
    TYPE_STRING  shift, and go to state 10
    TYPE_VOID    shift, and go to state 11
    CONSTANT     shift, and go to state 12
    ENUM         shift, and go to state 13
    WHILE        shift, and go to state 14
    FOR          shift, and go to state 15
    BREAK        shift, and go to state 167
    IF           shift, and go to state 16
    SWITCH       shift, and go to state 17
    PRINT        shift, and go to state 18
    NOT          shift, and go to state 19
    REPEAT       shift, and go to state 20
    IDENTIFIER   shift, and go to state 21
    COMMENT      shift, and go to state 22

    stmt             go to state 92
    stmt_list        go to state 212
    break_stmt_list  go to state 213
    genn_stmt        go to state 25
    func_stmt        go to state 26
    print_stmt       go to state 27
    for_stmt         go to state 28
    if_stmt          go to state 29
    enum_stmt        go to state 30
    while_stmt       go to state 31
    repeat_stmt      go to state 32
    switch_stmt      go to state 33
    func_proto       go to state 34
    func_define      go to state 35
    func_call        go to state 36
    for_proto        go to state 37
    for_define       go to state 38
    if_proto         go to state 39
    if_define        go to state 40
    enum_declare     go to state 41
    enum_define      go to state 42
    while_proto      go to state 43
    while_define     go to state 44
    type             go to state 45
    rvalue           go to state 46
    expr             go to state 47


State 195

   84 case_list: case_list CASE • rvalue ':' break_stmt_list

    INTEGER  shift, and go to state 1
    FLOAT    shift, and go to state 2
    BOOL     shift, and go to state 3
    CHAR     shift, and go to state 4
    STRING   shift, and go to state 5

    rvalue  go to state 214


State 196

   40 switch_stmt: SWITCH '(' IDENTIFIER ')' '{' case_list case_default • '}' ';'

    '}'  shift, and go to state 215


State 197

   41 switch_stmt: SWITCH '(' IDENTIFIER ')' '{' case_default '}' • ';'

    ';'  shift, and go to state 216


State 198

   39 repeat_stmt: REPEAT '{' '}' UNTIL '(' expr ')' • ';'

    ';'  shift, and go to state 217


State 199

   38 repeat_stmt: REPEAT '{' stmt_list '}' UNTIL '(' expr • ')' ';'
   91 expr: expr • PLUS expr
   92     | expr • MINUS expr
   93     | expr • MULT expr
   94     | expr • DIV expr
   95     | expr • POWER expr
   96     | expr • MODULE expr
   97     | expr • EQU_EQU expr
   98     | expr • NOT_EQU expr
   99     | expr • MORE_OR_EQU expr
  100     | expr • LESS_OR_EQU expr
  101     | expr • MORE expr
  102     | expr • LESS expr
  103     | expr • AND expr
  104     | expr • OR expr
  105     | expr • INC
  106     | expr • DEC

    MINUS        shift, and go to state 64
    MULT         shift, and go to state 65
    PLUS         shift, and go to state 66
    DIV          shift, and go to state 67
    MODULE       shift, and go to state 68
    POWER        shift, and go to state 69
    INC          shift, and go to state 70
    DEC          shift, and go to state 71
    MORE         shift, and go to state 72
    LESS         shift, and go to state 73
    EQU_EQU      shift, and go to state 74
    MORE_OR_EQU  shift, and go to state 75
    LESS_OR_EQU  shift, and go to state 76
    NOT_EQU      shift, and go to state 77
    AND          shift, and go to state 78
    OR           shift, and go to state 79
    ')'          shift, and go to state 218


State 200

   16 func_stmt_list: RETURN • expr ';'

    INTEGER     shift, and go to state 1
    FLOAT       shift, and go to state 2
    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    STRING      shift, and go to state 5
    NOT         shift, and go to state 19
    IDENTIFIER  shift, and go to state 56

    rvalue  go to state 46
    expr    go to state 219


State 201

   14 stmt_list: stmt_list • stmt
   15 func_stmt_list: stmt_list • RETURN expr ';'

    INTEGER      shift, and go to state 1
    FLOAT        shift, and go to state 2
    BOOL         shift, and go to state 3
    CHAR         shift, and go to state 4
    STRING       shift, and go to state 5
    TYPE_INT     shift, and go to state 6
    TYPE_FLOAT   shift, and go to state 7
    TYPE_CHAR    shift, and go to state 8
    TYPE_BOOL    shift, and go to state 9
    TYPE_STRING  shift, and go to state 10
    TYPE_VOID    shift, and go to state 11
    CONSTANT     shift, and go to state 12
    ENUM         shift, and go to state 13
    WHILE        shift, and go to state 14
    FOR          shift, and go to state 15
    IF           shift, and go to state 16
    RETURN       shift, and go to state 220
    SWITCH       shift, and go to state 17
    PRINT        shift, and go to state 18
    NOT          shift, and go to state 19
    REPEAT       shift, and go to state 20
    IDENTIFIER   shift, and go to state 21
    COMMENT      shift, and go to state 22

    stmt          go to state 130
    genn_stmt     go to state 25
    func_stmt     go to state 26
    print_stmt    go to state 27
    for_stmt      go to state 28
    if_stmt       go to state 29
    enum_stmt     go to state 30
    while_stmt    go to state 31
    repeat_stmt   go to state 32
    switch_stmt   go to state 33
    func_proto    go to state 34
    func_define   go to state 35
    func_call     go to state 36
    for_proto     go to state 37
    for_define    go to state 38
    if_proto      go to state 39
    if_define     go to state 40
    enum_declare  go to state 41
    enum_define   go to state 42
    while_proto   go to state 43
    while_define  go to state 44
    type          go to state 45
    rvalue        go to state 46
    expr          go to state 47


State 202

   44 func_define: type IDENTIFIER '(' parameters ')' '{' func_stmt_list • '}'

    '}'  shift, and go to state 221


State 203

   45 func_define: TYPE_VOID IDENTIFIER '(' parameters ')' '{' stmt_list '}' •

    $default  reduce using rule 45 (func_define)


State 204

   82 enum_list: IDENTIFIER EQU INTEGER ',' enum_list •

    $default  reduce using rule 82 (enum_list)


State 205

   17 break_stmt_list: stmt_list BREAK ';' •

    $default  reduce using rule 17 (break_stmt_list)


State 206

   47 for_proto: FOR '(' IDENTIFIER EQU expr ';' expr ';' • expr ')' ';'
   49 for_define: FOR '(' IDENTIFIER EQU expr ';' expr ';' • expr ')' '{' stmt_list '}'
   50           | FOR '(' IDENTIFIER EQU expr ';' expr ';' • expr ')' '{' break_stmt_list '}'

    INTEGER     shift, and go to state 1
    FLOAT       shift, and go to state 2
    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    STRING      shift, and go to state 5
    NOT         shift, and go to state 19
    IDENTIFIER  shift, and go to state 56

    rvalue  go to state 46
    expr    go to state 222


State 207

   48 for_proto: FOR '(' expr ';' expr ';' expr ')' • ';'
   51 for_define: FOR '(' expr ';' expr ';' expr ')' • '{' stmt_list '}'
   52           | FOR '(' expr ';' expr ';' expr ')' • '{' break_stmt_list '}'

    ';'  shift, and go to state 223
    '{'  shift, and go to state 224


State 208

   61 if_define: IF '(' expr ')' '{' '}' ELSE ';' •

    $default  reduce using rule 61 (if_define)


State 209

   59 if_define: IF '(' expr ')' '{' '}' ELSE '{' • stmt_list '}'
   60          | IF '(' expr ')' '{' '}' ELSE '{' • '}'

    INTEGER      shift, and go to state 1
    FLOAT        shift, and go to state 2
    BOOL         shift, and go to state 3
    CHAR         shift, and go to state 4
    STRING       shift, and go to state 5
    TYPE_INT     shift, and go to state 6
    TYPE_FLOAT   shift, and go to state 7
    TYPE_CHAR    shift, and go to state 8
    TYPE_BOOL    shift, and go to state 9
    TYPE_STRING  shift, and go to state 10
    TYPE_VOID    shift, and go to state 11
    CONSTANT     shift, and go to state 12
    ENUM         shift, and go to state 13
    WHILE        shift, and go to state 14
    FOR          shift, and go to state 15
    IF           shift, and go to state 16
    SWITCH       shift, and go to state 17
    PRINT        shift, and go to state 18
    NOT          shift, and go to state 19
    REPEAT       shift, and go to state 20
    IDENTIFIER   shift, and go to state 21
    COMMENT      shift, and go to state 22
    '}'          shift, and go to state 225

    stmt          go to state 92
    stmt_list     go to state 226
    genn_stmt     go to state 25
    func_stmt     go to state 26
    print_stmt    go to state 27
    for_stmt      go to state 28
    if_stmt       go to state 29
    enum_stmt     go to state 30
    while_stmt    go to state 31
    repeat_stmt   go to state 32
    switch_stmt   go to state 33
    func_proto    go to state 34
    func_define   go to state 35
    func_call     go to state 36
    for_proto     go to state 37
    for_define    go to state 38
    if_proto      go to state 39
    if_define     go to state 40
    enum_declare  go to state 41
    enum_define   go to state 42
    while_proto   go to state 43
    while_define  go to state 44
    type          go to state 45
    rvalue        go to state 46
    expr          go to state 47


State 210

   55 if_define: IF '(' expr ')' '{' stmt_list '}' ELSE • '{' stmt_list '}'
   56          | IF '(' expr ')' '{' stmt_list '}' ELSE • '{' '}'
   57          | IF '(' expr ')' '{' stmt_list '}' ELSE • ';'

    ';'  shift, and go to state 227
    '{'  shift, and go to state 228


State 211

   85 case_list: CASE rvalue ':' • break_stmt_list

    INTEGER      shift, and go to state 1
    FLOAT        shift, and go to state 2
    BOOL         shift, and go to state 3
    CHAR         shift, and go to state 4
    STRING       shift, and go to state 5
    TYPE_INT     shift, and go to state 6
    TYPE_FLOAT   shift, and go to state 7
    TYPE_CHAR    shift, and go to state 8
    TYPE_BOOL    shift, and go to state 9
    TYPE_STRING  shift, and go to state 10
    TYPE_VOID    shift, and go to state 11
    CONSTANT     shift, and go to state 12
    ENUM         shift, and go to state 13
    WHILE        shift, and go to state 14
    FOR          shift, and go to state 15
    BREAK        shift, and go to state 167
    IF           shift, and go to state 16
    SWITCH       shift, and go to state 17
    PRINT        shift, and go to state 18
    NOT          shift, and go to state 19
    REPEAT       shift, and go to state 20
    IDENTIFIER   shift, and go to state 21
    COMMENT      shift, and go to state 22

    stmt             go to state 92
    stmt_list        go to state 212
    break_stmt_list  go to state 229
    genn_stmt        go to state 25
    func_stmt        go to state 26
    print_stmt       go to state 27
    for_stmt         go to state 28
    if_stmt          go to state 29
    enum_stmt        go to state 30
    while_stmt       go to state 31
    repeat_stmt      go to state 32
    switch_stmt      go to state 33
    func_proto       go to state 34
    func_define      go to state 35
    func_call        go to state 36
    for_proto        go to state 37
    for_define       go to state 38
    if_proto         go to state 39
    if_define        go to state 40
    enum_declare     go to state 41
    enum_define      go to state 42
    while_proto      go to state 43
    while_define     go to state 44
    type             go to state 45
    rvalue           go to state 46
    expr             go to state 47


State 212

   14 stmt_list: stmt_list • stmt
   17 break_stmt_list: stmt_list • BREAK ';'

    INTEGER      shift, and go to state 1
    FLOAT        shift, and go to state 2
    BOOL         shift, and go to state 3
    CHAR         shift, and go to state 4
    STRING       shift, and go to state 5
    TYPE_INT     shift, and go to state 6
    TYPE_FLOAT   shift, and go to state 7
    TYPE_CHAR    shift, and go to state 8
    TYPE_BOOL    shift, and go to state 9
    TYPE_STRING  shift, and go to state 10
    TYPE_VOID    shift, and go to state 11
    CONSTANT     shift, and go to state 12
    ENUM         shift, and go to state 13
    WHILE        shift, and go to state 14
    FOR          shift, and go to state 15
    BREAK        shift, and go to state 186
    IF           shift, and go to state 16
    SWITCH       shift, and go to state 17
    PRINT        shift, and go to state 18
    NOT          shift, and go to state 19
    REPEAT       shift, and go to state 20
    IDENTIFIER   shift, and go to state 21
    COMMENT      shift, and go to state 22

    stmt          go to state 130
    genn_stmt     go to state 25
    func_stmt     go to state 26
    print_stmt    go to state 27
    for_stmt      go to state 28
    if_stmt       go to state 29
    enum_stmt     go to state 30
    while_stmt    go to state 31
    repeat_stmt   go to state 32
    switch_stmt   go to state 33
    func_proto    go to state 34
    func_define   go to state 35
    func_call     go to state 36
    for_proto     go to state 37
    for_define    go to state 38
    if_proto      go to state 39
    if_define     go to state 40
    enum_declare  go to state 41
    enum_define   go to state 42
    while_proto   go to state 43
    while_define  go to state 44
    type          go to state 45
    rvalue        go to state 46
    expr          go to state 47


State 213

   86 case_default: DEFAULT ':' break_stmt_list •

    $default  reduce using rule 86 (case_default)


State 214

   84 case_list: case_list CASE rvalue • ':' break_stmt_list

    ':'  shift, and go to state 230


State 215

   40 switch_stmt: SWITCH '(' IDENTIFIER ')' '{' case_list case_default '}' • ';'

    ';'  shift, and go to state 231


State 216

   41 switch_stmt: SWITCH '(' IDENTIFIER ')' '{' case_default '}' ';' •

    $default  reduce using rule 41 (switch_stmt)


State 217

   39 repeat_stmt: REPEAT '{' '}' UNTIL '(' expr ')' ';' •

    $default  reduce using rule 39 (repeat_stmt)


State 218

   38 repeat_stmt: REPEAT '{' stmt_list '}' UNTIL '(' expr ')' • ';'

    ';'  shift, and go to state 232


State 219

   16 func_stmt_list: RETURN expr • ';'
   91 expr: expr • PLUS expr
   92     | expr • MINUS expr
   93     | expr • MULT expr
   94     | expr • DIV expr
   95     | expr • POWER expr
   96     | expr • MODULE expr
   97     | expr • EQU_EQU expr
   98     | expr • NOT_EQU expr
   99     | expr • MORE_OR_EQU expr
  100     | expr • LESS_OR_EQU expr
  101     | expr • MORE expr
  102     | expr • LESS expr
  103     | expr • AND expr
  104     | expr • OR expr
  105     | expr • INC
  106     | expr • DEC

    MINUS        shift, and go to state 64
    MULT         shift, and go to state 65
    PLUS         shift, and go to state 66
    DIV          shift, and go to state 67
    MODULE       shift, and go to state 68
    POWER        shift, and go to state 69
    INC          shift, and go to state 70
    DEC          shift, and go to state 71
    MORE         shift, and go to state 72
    LESS         shift, and go to state 73
    EQU_EQU      shift, and go to state 74
    MORE_OR_EQU  shift, and go to state 75
    LESS_OR_EQU  shift, and go to state 76
    NOT_EQU      shift, and go to state 77
    AND          shift, and go to state 78
    OR           shift, and go to state 79
    ';'          shift, and go to state 233


State 220

   15 func_stmt_list: stmt_list RETURN • expr ';'

    INTEGER     shift, and go to state 1
    FLOAT       shift, and go to state 2
    BOOL        shift, and go to state 3
    CHAR        shift, and go to state 4
    STRING      shift, and go to state 5
    NOT         shift, and go to state 19
    IDENTIFIER  shift, and go to state 56

    rvalue  go to state 46
    expr    go to state 234


State 221

   44 func_define: type IDENTIFIER '(' parameters ')' '{' func_stmt_list '}' •

    $default  reduce using rule 44 (func_define)


State 222

   47 for_proto: FOR '(' IDENTIFIER EQU expr ';' expr ';' expr • ')' ';'
   49 for_define: FOR '(' IDENTIFIER EQU expr ';' expr ';' expr • ')' '{' stmt_list '}'
   50           | FOR '(' IDENTIFIER EQU expr ';' expr ';' expr • ')' '{' break_stmt_list '}'
   91 expr: expr • PLUS expr
   92     | expr • MINUS expr
   93     | expr • MULT expr
   94     | expr • DIV expr
   95     | expr • POWER expr
   96     | expr • MODULE expr
   97     | expr • EQU_EQU expr
   98     | expr • NOT_EQU expr
   99     | expr • MORE_OR_EQU expr
  100     | expr • LESS_OR_EQU expr
  101     | expr • MORE expr
  102     | expr • LESS expr
  103     | expr • AND expr
  104     | expr • OR expr
  105     | expr • INC
  106     | expr • DEC

    MINUS        shift, and go to state 64
    MULT         shift, and go to state 65
    PLUS         shift, and go to state 66
    DIV          shift, and go to state 67
    MODULE       shift, and go to state 68
    POWER        shift, and go to state 69
    INC          shift, and go to state 70
    DEC          shift, and go to state 71
    MORE         shift, and go to state 72
    LESS         shift, and go to state 73
    EQU_EQU      shift, and go to state 74
    MORE_OR_EQU  shift, and go to state 75
    LESS_OR_EQU  shift, and go to state 76
    NOT_EQU      shift, and go to state 77
    AND          shift, and go to state 78
    OR           shift, and go to state 79
    ')'          shift, and go to state 235


State 223

   48 for_proto: FOR '(' expr ';' expr ';' expr ')' ';' •

    $default  reduce using rule 48 (for_proto)


State 224

   51 for_define: FOR '(' expr ';' expr ';' expr ')' '{' • stmt_list '}'
   52           | FOR '(' expr ';' expr ';' expr ')' '{' • break_stmt_list '}'

    INTEGER      shift, and go to state 1
    FLOAT        shift, and go to state 2
    BOOL         shift, and go to state 3
    CHAR         shift, and go to state 4
    STRING       shift, and go to state 5
    TYPE_INT     shift, and go to state 6
    TYPE_FLOAT   shift, and go to state 7
    TYPE_CHAR    shift, and go to state 8
    TYPE_BOOL    shift, and go to state 9
    TYPE_STRING  shift, and go to state 10
    TYPE_VOID    shift, and go to state 11
    CONSTANT     shift, and go to state 12
    ENUM         shift, and go to state 13
    WHILE        shift, and go to state 14
    FOR          shift, and go to state 15
    BREAK        shift, and go to state 167
    IF           shift, and go to state 16
    SWITCH       shift, and go to state 17
    PRINT        shift, and go to state 18
    NOT          shift, and go to state 19
    REPEAT       shift, and go to state 20
    IDENTIFIER   shift, and go to state 21
    COMMENT      shift, and go to state 22

    stmt             go to state 92
    stmt_list        go to state 236
    break_stmt_list  go to state 237
    genn_stmt        go to state 25
    func_stmt        go to state 26
    print_stmt       go to state 27
    for_stmt         go to state 28
    if_stmt          go to state 29
    enum_stmt        go to state 30
    while_stmt       go to state 31
    repeat_stmt      go to state 32
    switch_stmt      go to state 33
    func_proto       go to state 34
    func_define      go to state 35
    func_call        go to state 36
    for_proto        go to state 37
    for_define       go to state 38
    if_proto         go to state 39
    if_define        go to state 40
    enum_declare     go to state 41
    enum_define      go to state 42
    while_proto      go to state 43
    while_define     go to state 44
    type             go to state 45
    rvalue           go to state 46
    expr             go to state 47


State 225

   60 if_define: IF '(' expr ')' '{' '}' ELSE '{' '}' •

    $default  reduce using rule 60 (if_define)


State 226

   14 stmt_list: stmt_list • stmt
   59 if_define: IF '(' expr ')' '{' '}' ELSE '{' stmt_list • '}'

    INTEGER      shift, and go to state 1
    FLOAT        shift, and go to state 2
    BOOL         shift, and go to state 3
    CHAR         shift, and go to state 4
    STRING       shift, and go to state 5
    TYPE_INT     shift, and go to state 6
    TYPE_FLOAT   shift, and go to state 7
    TYPE_CHAR    shift, and go to state 8
    TYPE_BOOL    shift, and go to state 9
    TYPE_STRING  shift, and go to state 10
    TYPE_VOID    shift, and go to state 11
    CONSTANT     shift, and go to state 12
    ENUM         shift, and go to state 13
    WHILE        shift, and go to state 14
    FOR          shift, and go to state 15
    IF           shift, and go to state 16
    SWITCH       shift, and go to state 17
    PRINT        shift, and go to state 18
    NOT          shift, and go to state 19
    REPEAT       shift, and go to state 20
    IDENTIFIER   shift, and go to state 21
    COMMENT      shift, and go to state 22
    '}'          shift, and go to state 238

    stmt          go to state 130
    genn_stmt     go to state 25
    func_stmt     go to state 26
    print_stmt    go to state 27
    for_stmt      go to state 28
    if_stmt       go to state 29
    enum_stmt     go to state 30
    while_stmt    go to state 31
    repeat_stmt   go to state 32
    switch_stmt   go to state 33
    func_proto    go to state 34
    func_define   go to state 35
    func_call     go to state 36
    for_proto     go to state 37
    for_define    go to state 38
    if_proto      go to state 39
    if_define     go to state 40
    enum_declare  go to state 41
    enum_define   go to state 42
    while_proto   go to state 43
    while_define  go to state 44
    type          go to state 45
    rvalue        go to state 46
    expr          go to state 47


State 227

   57 if_define: IF '(' expr ')' '{' stmt_list '}' ELSE ';' •

    $default  reduce using rule 57 (if_define)


State 228

   55 if_define: IF '(' expr ')' '{' stmt_list '}' ELSE '{' • stmt_list '}'
   56          | IF '(' expr ')' '{' stmt_list '}' ELSE '{' • '}'

    INTEGER      shift, and go to state 1
    FLOAT        shift, and go to state 2
    BOOL         shift, and go to state 3
    CHAR         shift, and go to state 4
    STRING       shift, and go to state 5
    TYPE_INT     shift, and go to state 6
    TYPE_FLOAT   shift, and go to state 7
    TYPE_CHAR    shift, and go to state 8
    TYPE_BOOL    shift, and go to state 9
    TYPE_STRING  shift, and go to state 10
    TYPE_VOID    shift, and go to state 11
    CONSTANT     shift, and go to state 12
    ENUM         shift, and go to state 13
    WHILE        shift, and go to state 14
    FOR          shift, and go to state 15
    IF           shift, and go to state 16
    SWITCH       shift, and go to state 17
    PRINT        shift, and go to state 18
    NOT          shift, and go to state 19
    REPEAT       shift, and go to state 20
    IDENTIFIER   shift, and go to state 21
    COMMENT      shift, and go to state 22
    '}'          shift, and go to state 239

    stmt          go to state 92
    stmt_list     go to state 240
    genn_stmt     go to state 25
    func_stmt     go to state 26
    print_stmt    go to state 27
    for_stmt      go to state 28
    if_stmt       go to state 29
    enum_stmt     go to state 30
    while_stmt    go to state 31
    repeat_stmt   go to state 32
    switch_stmt   go to state 33
    func_proto    go to state 34
    func_define   go to state 35
    func_call     go to state 36
    for_proto     go to state 37
    for_define    go to state 38
    if_proto      go to state 39
    if_define     go to state 40
    enum_declare  go to state 41
    enum_define   go to state 42
    while_proto   go to state 43
    while_define  go to state 44
    type          go to state 45
    rvalue        go to state 46
    expr          go to state 47


State 229

   85 case_list: CASE rvalue ':' break_stmt_list •

    $default  reduce using rule 85 (case_list)


State 230

   84 case_list: case_list CASE rvalue ':' • break_stmt_list

    INTEGER      shift, and go to state 1
    FLOAT        shift, and go to state 2
    BOOL         shift, and go to state 3
    CHAR         shift, and go to state 4
    STRING       shift, and go to state 5
    TYPE_INT     shift, and go to state 6
    TYPE_FLOAT   shift, and go to state 7
    TYPE_CHAR    shift, and go to state 8
    TYPE_BOOL    shift, and go to state 9
    TYPE_STRING  shift, and go to state 10
    TYPE_VOID    shift, and go to state 11
    CONSTANT     shift, and go to state 12
    ENUM         shift, and go to state 13
    WHILE        shift, and go to state 14
    FOR          shift, and go to state 15
    BREAK        shift, and go to state 167
    IF           shift, and go to state 16
    SWITCH       shift, and go to state 17
    PRINT        shift, and go to state 18
    NOT          shift, and go to state 19
    REPEAT       shift, and go to state 20
    IDENTIFIER   shift, and go to state 21
    COMMENT      shift, and go to state 22

    stmt             go to state 92
    stmt_list        go to state 212
    break_stmt_list  go to state 241
    genn_stmt        go to state 25
    func_stmt        go to state 26
    print_stmt       go to state 27
    for_stmt         go to state 28
    if_stmt          go to state 29
    enum_stmt        go to state 30
    while_stmt       go to state 31
    repeat_stmt      go to state 32
    switch_stmt      go to state 33
    func_proto       go to state 34
    func_define      go to state 35
    func_call        go to state 36
    for_proto        go to state 37
    for_define       go to state 38
    if_proto         go to state 39
    if_define        go to state 40
    enum_declare     go to state 41
    enum_define      go to state 42
    while_proto      go to state 43
    while_define     go to state 44
    type             go to state 45
    rvalue           go to state 46
    expr             go to state 47


State 231

   40 switch_stmt: SWITCH '(' IDENTIFIER ')' '{' case_list case_default '}' ';' •

    $default  reduce using rule 40 (switch_stmt)


State 232

   38 repeat_stmt: REPEAT '{' stmt_list '}' UNTIL '(' expr ')' ';' •

    $default  reduce using rule 38 (repeat_stmt)


State 233

   16 func_stmt_list: RETURN expr ';' •

    $default  reduce using rule 16 (func_stmt_list)


State 234

   15 func_stmt_list: stmt_list RETURN expr • ';'
   91 expr: expr • PLUS expr
   92     | expr • MINUS expr
   93     | expr • MULT expr
   94     | expr • DIV expr
   95     | expr • POWER expr
   96     | expr • MODULE expr
   97     | expr • EQU_EQU expr
   98     | expr • NOT_EQU expr
   99     | expr • MORE_OR_EQU expr
  100     | expr • LESS_OR_EQU expr
  101     | expr • MORE expr
  102     | expr • LESS expr
  103     | expr • AND expr
  104     | expr • OR expr
  105     | expr • INC
  106     | expr • DEC

    MINUS        shift, and go to state 64
    MULT         shift, and go to state 65
    PLUS         shift, and go to state 66
    DIV          shift, and go to state 67
    MODULE       shift, and go to state 68
    POWER        shift, and go to state 69
    INC          shift, and go to state 70
    DEC          shift, and go to state 71
    MORE         shift, and go to state 72
    LESS         shift, and go to state 73
    EQU_EQU      shift, and go to state 74
    MORE_OR_EQU  shift, and go to state 75
    LESS_OR_EQU  shift, and go to state 76
    NOT_EQU      shift, and go to state 77
    AND          shift, and go to state 78
    OR           shift, and go to state 79
    ';'          shift, and go to state 242


State 235

   47 for_proto: FOR '(' IDENTIFIER EQU expr ';' expr ';' expr ')' • ';'
   49 for_define: FOR '(' IDENTIFIER EQU expr ';' expr ';' expr ')' • '{' stmt_list '}'
   50           | FOR '(' IDENTIFIER EQU expr ';' expr ';' expr ')' • '{' break_stmt_list '}'

    ';'  shift, and go to state 243
    '{'  shift, and go to state 244


State 236

   14 stmt_list: stmt_list • stmt
   17 break_stmt_list: stmt_list • BREAK ';'
   51 for_define: FOR '(' expr ';' expr ';' expr ')' '{' stmt_list • '}'

    INTEGER      shift, and go to state 1
    FLOAT        shift, and go to state 2
    BOOL         shift, and go to state 3
    CHAR         shift, and go to state 4
    STRING       shift, and go to state 5
    TYPE_INT     shift, and go to state 6
    TYPE_FLOAT   shift, and go to state 7
    TYPE_CHAR    shift, and go to state 8
    TYPE_BOOL    shift, and go to state 9
    TYPE_STRING  shift, and go to state 10
    TYPE_VOID    shift, and go to state 11
    CONSTANT     shift, and go to state 12
    ENUM         shift, and go to state 13
    WHILE        shift, and go to state 14
    FOR          shift, and go to state 15
    BREAK        shift, and go to state 186
    IF           shift, and go to state 16
    SWITCH       shift, and go to state 17
    PRINT        shift, and go to state 18
    NOT          shift, and go to state 19
    REPEAT       shift, and go to state 20
    IDENTIFIER   shift, and go to state 21
    COMMENT      shift, and go to state 22
    '}'          shift, and go to state 245

    stmt          go to state 130
    genn_stmt     go to state 25
    func_stmt     go to state 26
    print_stmt    go to state 27
    for_stmt      go to state 28
    if_stmt       go to state 29
    enum_stmt     go to state 30
    while_stmt    go to state 31
    repeat_stmt   go to state 32
    switch_stmt   go to state 33
    func_proto    go to state 34
    func_define   go to state 35
    func_call     go to state 36
    for_proto     go to state 37
    for_define    go to state 38
    if_proto      go to state 39
    if_define     go to state 40
    enum_declare  go to state 41
    enum_define   go to state 42
    while_proto   go to state 43
    while_define  go to state 44
    type          go to state 45
    rvalue        go to state 46
    expr          go to state 47


State 237

   52 for_define: FOR '(' expr ';' expr ';' expr ')' '{' break_stmt_list • '}'

    '}'  shift, and go to state 246


State 238

   59 if_define: IF '(' expr ')' '{' '}' ELSE '{' stmt_list '}' •

    $default  reduce using rule 59 (if_define)


State 239

   56 if_define: IF '(' expr ')' '{' stmt_list '}' ELSE '{' '}' •

    $default  reduce using rule 56 (if_define)


State 240

   14 stmt_list: stmt_list • stmt
   55 if_define: IF '(' expr ')' '{' stmt_list '}' ELSE '{' stmt_list • '}'

    INTEGER      shift, and go to state 1
    FLOAT        shift, and go to state 2
    BOOL         shift, and go to state 3
    CHAR         shift, and go to state 4
    STRING       shift, and go to state 5
    TYPE_INT     shift, and go to state 6
    TYPE_FLOAT   shift, and go to state 7
    TYPE_CHAR    shift, and go to state 8
    TYPE_BOOL    shift, and go to state 9
    TYPE_STRING  shift, and go to state 10
    TYPE_VOID    shift, and go to state 11
    CONSTANT     shift, and go to state 12
    ENUM         shift, and go to state 13
    WHILE        shift, and go to state 14
    FOR          shift, and go to state 15
    IF           shift, and go to state 16
    SWITCH       shift, and go to state 17
    PRINT        shift, and go to state 18
    NOT          shift, and go to state 19
    REPEAT       shift, and go to state 20
    IDENTIFIER   shift, and go to state 21
    COMMENT      shift, and go to state 22
    '}'          shift, and go to state 247

    stmt          go to state 130
    genn_stmt     go to state 25
    func_stmt     go to state 26
    print_stmt    go to state 27
    for_stmt      go to state 28
    if_stmt       go to state 29
    enum_stmt     go to state 30
    while_stmt    go to state 31
    repeat_stmt   go to state 32
    switch_stmt   go to state 33
    func_proto    go to state 34
    func_define   go to state 35
    func_call     go to state 36
    for_proto     go to state 37
    for_define    go to state 38
    if_proto      go to state 39
    if_define     go to state 40
    enum_declare  go to state 41
    enum_define   go to state 42
    while_proto   go to state 43
    while_define  go to state 44
    type          go to state 45
    rvalue        go to state 46
    expr          go to state 47


State 241

   84 case_list: case_list CASE rvalue ':' break_stmt_list •

    $default  reduce using rule 84 (case_list)


State 242

   15 func_stmt_list: stmt_list RETURN expr ';' •

    $default  reduce using rule 15 (func_stmt_list)


State 243

   47 for_proto: FOR '(' IDENTIFIER EQU expr ';' expr ';' expr ')' ';' •

    $default  reduce using rule 47 (for_proto)


State 244

   49 for_define: FOR '(' IDENTIFIER EQU expr ';' expr ';' expr ')' '{' • stmt_list '}'
   50           | FOR '(' IDENTIFIER EQU expr ';' expr ';' expr ')' '{' • break_stmt_list '}'

    INTEGER      shift, and go to state 1
    FLOAT        shift, and go to state 2
    BOOL         shift, and go to state 3
    CHAR         shift, and go to state 4
    STRING       shift, and go to state 5
    TYPE_INT     shift, and go to state 6
    TYPE_FLOAT   shift, and go to state 7
    TYPE_CHAR    shift, and go to state 8
    TYPE_BOOL    shift, and go to state 9
    TYPE_STRING  shift, and go to state 10
    TYPE_VOID    shift, and go to state 11
    CONSTANT     shift, and go to state 12
    ENUM         shift, and go to state 13
    WHILE        shift, and go to state 14
    FOR          shift, and go to state 15
    BREAK        shift, and go to state 167
    IF           shift, and go to state 16
    SWITCH       shift, and go to state 17
    PRINT        shift, and go to state 18
    NOT          shift, and go to state 19
    REPEAT       shift, and go to state 20
    IDENTIFIER   shift, and go to state 21
    COMMENT      shift, and go to state 22

    stmt             go to state 92
    stmt_list        go to state 248
    break_stmt_list  go to state 249
    genn_stmt        go to state 25
    func_stmt        go to state 26
    print_stmt       go to state 27
    for_stmt         go to state 28
    if_stmt          go to state 29
    enum_stmt        go to state 30
    while_stmt       go to state 31
    repeat_stmt      go to state 32
    switch_stmt      go to state 33
    func_proto       go to state 34
    func_define      go to state 35
    func_call        go to state 36
    for_proto        go to state 37
    for_define       go to state 38
    if_proto         go to state 39
    if_define        go to state 40
    enum_declare     go to state 41
    enum_define      go to state 42
    while_proto      go to state 43
    while_define     go to state 44
    type             go to state 45
    rvalue           go to state 46
    expr             go to state 47


State 245

   51 for_define: FOR '(' expr ';' expr ';' expr ')' '{' stmt_list '}' •

    $default  reduce using rule 51 (for_define)


State 246

   52 for_define: FOR '(' expr ';' expr ';' expr ')' '{' break_stmt_list '}' •

    $default  reduce using rule 52 (for_define)


State 247

   55 if_define: IF '(' expr ')' '{' stmt_list '}' ELSE '{' stmt_list '}' •

    $default  reduce using rule 55 (if_define)


State 248

   14 stmt_list: stmt_list • stmt
   17 break_stmt_list: stmt_list • BREAK ';'
   49 for_define: FOR '(' IDENTIFIER EQU expr ';' expr ';' expr ')' '{' stmt_list • '}'

    INTEGER      shift, and go to state 1
    FLOAT        shift, and go to state 2
    BOOL         shift, and go to state 3
    CHAR         shift, and go to state 4
    STRING       shift, and go to state 5
    TYPE_INT     shift, and go to state 6
    TYPE_FLOAT   shift, and go to state 7
    TYPE_CHAR    shift, and go to state 8
    TYPE_BOOL    shift, and go to state 9
    TYPE_STRING  shift, and go to state 10
    TYPE_VOID    shift, and go to state 11
    CONSTANT     shift, and go to state 12
    ENUM         shift, and go to state 13
    WHILE        shift, and go to state 14
    FOR          shift, and go to state 15
    BREAK        shift, and go to state 186
    IF           shift, and go to state 16
    SWITCH       shift, and go to state 17
    PRINT        shift, and go to state 18
    NOT          shift, and go to state 19
    REPEAT       shift, and go to state 20
    IDENTIFIER   shift, and go to state 21
    COMMENT      shift, and go to state 22
    '}'          shift, and go to state 250

    stmt          go to state 130
    genn_stmt     go to state 25
    func_stmt     go to state 26
    print_stmt    go to state 27
    for_stmt      go to state 28
    if_stmt       go to state 29
    enum_stmt     go to state 30
    while_stmt    go to state 31
    repeat_stmt   go to state 32
    switch_stmt   go to state 33
    func_proto    go to state 34
    func_define   go to state 35
    func_call     go to state 36
    for_proto     go to state 37
    for_define    go to state 38
    if_proto      go to state 39
    if_define     go to state 40
    enum_declare  go to state 41
    enum_define   go to state 42
    while_proto   go to state 43
    while_define  go to state 44
    type          go to state 45
    rvalue        go to state 46
    expr          go to state 47


State 249

   50 for_define: FOR '(' IDENTIFIER EQU expr ';' expr ';' expr ')' '{' break_stmt_list • '}'

    '}'  shift, and go to state 251


State 250

   49 for_define: FOR '(' IDENTIFIER EQU expr ';' expr ';' expr ')' '{' stmt_list '}' •

    $default  reduce using rule 49 (for_define)


State 251

   50 for_define: FOR '(' IDENTIFIER EQU expr ';' expr ';' expr ')' '{' break_stmt_list '}' •

    $default  reduce using rule 50 (for_define)
